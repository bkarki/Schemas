{
  "swagger": "2.0",
  "x-stoplight": {
    "id": "pyg1ua0h4ywat"
  },
  "info": {
    "title": "Content Server Rest API",
    "description": "OT ECM API",
    "version": "2.0.2",
    "termsOfService": "Terms & Conditions",
    "contact": {
      "name": "!DNT--Pulse_US_Scrum",
      "email": "!DNT--Pulse_US_Scrum@cbre.com",
      "url": "https://cbre.com"
    },
    "license": {
      "name": "CBRE South Asia PVT LTD",
      "url": "https://cbre.com"
    }
  },
  "host": "ecmdev.cbre.com",
  "basePath": "/otcs/cs/api/",
  "tags": [
    {
      "name": "apiinfo",
      "description": "API Information"
    },
    {
      "name": "auth",
      "description": "Authenticate user"
    },
    {
      "name": "validation",
      "description": "Validation"
    },
    {
      "name": "forms",
      "description": "Use forms"
    },
    {
      "name": "multipart",
      "description": "Manage Large File Uploads"
    },
    {
      "name": "nodes",
      "description": "Manage nodes"
    },
    {
      "name": "versions",
      "description": "Manage versions"
    }
  ],
  "consumes": [
    "multipart/form-data",
    "application/json"
  ],
  "produces": [
    "application/json",
    "multipart/form-data",
    "application/x-www-form-urlencoded"
  ],
  "paths": {
    "/v1/apiinfo": {
      "get": {
        "operationId": "GetAPIInfo",
        "summary": "Get API Info",
        "description": "Provides the GET, POST, PUT and DELETE methods for the given resource.",
        "parameters": [
          {
            "name": "resource",
            "description": "The REST API url to get information on (ex. api/v1/nodes/2000/nodes)",
            "type": "string",
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "type": "string",
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "type": "string",
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "type": "string",
            "in": "query"
          },
          {
            "type": "string",
            "in": "query",
            "name": "suppress_response_codes",
            "description": "Forces the server to always return a HTTP Response of '200 OK'. "
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/apiinfo"
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'resource' is required</li><li>No action information found for resource {resource}</li><li>The resource {resource} was not found in the mappings registry or the mappings entry was malformed</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "404": {
            "description": "Not Implemented"
          }
        },
        "tags": [
          "apiinfo"
        ]
      }
    },
    "/v2/nodes/actions": {
      "get": {
        "operationId": "getNodeActions",
        "summary": "Get actions",
        "description": "Gets the actions for the specified node IDs (up to 100 items) that the current user is able to perform. To get more than 100 items, use the POST api/v2/nodes/actions call below.",
        "parameters": [
          {
            "name": "ids",
            "description": "One or more node IDs.",
            "type": "string",
            "in": "query"
          },
          {
            "name": "actions",
            "description": "Retrieve actions for the node. If not specified, all actions that the current user can perform will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "reference_id",
            "description": "Reference node ID",
            "type": "string",
            "in": "query"
          },
          {
            "name": "suppress_response_codes",
            "description": "Forces the server to always return a HTTP Response of '200 OK'.",
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/nodes_V2ResponseNodesActions"
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'resource' is required</li><li>No action information found for resource {resource}</li><li>The resource {resource} was not found in the mappings registry or the mappings entry was malformed</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "404": {
            "description": "Not Implemented"
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "post": {
        "summary": "Post Actions",
        "operationId": "post-v2-nodes-actions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/nodes_V2ResponseNodesActions"
            }
          }
        },
        "description": "getNodeActions2 - Download file",
        "parameters": [
          {
            "in": "formData",
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "ids",
            "description": "ids"
          },
          {
            "in": "formData",
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "actions",
            "description": "actions"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "reference_id",
            "description": "reference_id"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "suppress_response_codes",
            "description": "suppress_response_codes"
          }
        ]
      }
    },
    "/v1/validation/nodes": {
      "post": {
        "operationId": "CheckNames",
        "summary": "Check a list of names",
        "description": "For a list of names and a given parent node, check to see if there are name collisions (subject to database collation) between the list of names and the nodes in the parent node.",
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "type": "string",
              "description": "A JSON object in string format specifying the following: 'parent_id' (integer) and 'names' (List of strings).  Example: {\"parent_id\":2000,\"names\":[\"myDocument.doc\",\"myEmail.msg\",\"folder1\"]}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/validation_CheckNodesInfo"
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Body Parameter 'parent_id' is invalid.</li><li>Body Parameter 'parent_id' is missing.</li><li>Body Parameter 'names' is invalid.</li><li>Body Parameter 'names' is missing.</li><li>Error retrieving nodes</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "validation"
        ]
      }
    },
    "/v1/forms/nodes/create": {
      "get": {
        "operationId": "createform",
        "summary": "Alpaca form for creating a node",
        "description": "Gets the Alpaca form for creating a node.",
        "parameters": [
          {
            "name": "type",
            "description": "The subtype of the node to be created",
            "type": "integer",
            "in": "query",
            "required": true
          },
          {
            "name": "parent_id",
            "description": "The ID of the parent node for the node that will be created",
            "type": "integer",
            "in": "query",
            "required": true
          },
          {
            "name": "category_id",
            "description": "The ID of the category to add to the node (this parameter can be called multiple times, ex. category_id=111&category_id=222)",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "{attribute_name}",
            "description": "Value for the Additional Node Attribute",
            "type": "string",
            "in": "query"
          },
          {
            "type": "string",
            "in": "query",
            "name": "suppress_response_codes",
            "description": "suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/forms_CreateFormInfo"
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'parent_id' is required</li><li>Argument 'type' is required</li><li>Invalid datatype specified for argument 'parent_id'</li><li>Invalid datatype specified for argument 'type'</li><li>Invalid datatype specified for argument 'category_id'</li><li>Category ID {category_id} is not a valid category.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Subtype {type} not registered</li><li>Could not get a node for {id}</li><li>Could not process object, type {type} has no action 'create'</li></ul>"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/forms/nodes/file": {
      "get": {
        "operationId": "GetFormFileNode",
        "summary": "Alpaca form for filing a node",
        "description": "Gets the Alpaca form for filing a node.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the node",
            "type": "integer",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/forms_GetFormFileNodeInfo"
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not retrieve form. Invalid or missing parameters</li><li>Invalid datatype specified for argument 'id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>The Intelligent Filing Feature is not enabled</li><li>Error getting CS node</li><li>Invalid node type</li><li>Error getting form</li><li>Error creating form</li></ul>\""
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/nodes": {
      "post": {
        "operationId": "createNode",
        "summary": "Create node | Copy a node",
        "description": "Creates a node OR Copies a node.<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>The following examples will assume that there is are two categories available:<br><br>Category1 (ID 9830)<ul><li>TextField (Attribute ID 2)</li><li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li></ul>Category2 (ID 6228)<ul><li>TextField (Attribute ID 2)</li></ul><br>Create a Folder:<br><br><code>{\"type\":0, \"parent_id\":2000, \"name\":\"New Folder\"}</code><br><br>Create a Folder with Category1 and Category2 and use the default attribute values for both categories:<br><br><code>{\"type\":0, \"parent_id\":2000, \"name\":\"New Folder\", \"roles\":{\"categories\":{\"9830\":{\"9830_1\":{}}, \"6228\":{\"6228_1\":{}}}}}</code><br><br>Create a Folder with Category1 and Category2. Category1's Set Textfield on the second row has 'aaa' in the Set Textfield's third value; Category2's Textfield is 'bbb':<br><br><code>{\"type\":0, \"parent_id\":2000, \"name\":\"New Folder\", \"roles\":{\"categories\":{\"9830\":{\"9830_3_2_4\":[\"\",\"\",\"aaa\"]}, \"6228\":{\"6228_2\":\"bbb\"}}}}</code><br><br><br>Copy a node 12345 to a folder 5678 (which doesn't have any categories):<br><br><code>{\"original_id\":12345, \"parent_id\":5678}</code><br><br>Copy a node 12345 to a folder 5678 (which doesn't have any categories) while applying Category2 with default values:<br><br><code>{\"original_id\":12345, \"parent_id\":5678, \"roles\":{\"categories\":{\"6228\":{\"6228_1\":{}}}}}</code><br><br><br>Create a node\n- <b>required fields</b>: type, name, parent_id\n\nCopy a node\n- <b>required fields</b>: original_id, parent_id\n- NOTE: original_id is the ID of the node to copy, parent_id is the ID of the node to copy original_id to\n\n<br><b>The parameters for creating nodes of a specific subtype are listed below:</b><hr></hr>\n\nCreate category\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **131**\n\nCreate channel\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **207**\n\nCreate document\n- <b>required fields</b>: type, parent_id, name, file\n- defaults: type = **144**\n\nCreate compound document\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **136**\n\nCreate folder\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **0**\n\nCreate news\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **208**\n\nCreate project\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **202**\n\nCreate shortcut\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **1**\n\nCreate generation\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **2**\n\nCreate task\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **206**\n\nCreate task group\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **205**\n\nCreate task list\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **204**\n\nCreate task milestone\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **212**\n\nCreate URL\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **140**\n\nCreate virtual folder\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **899**",
        "parameters": [
          {
            "in": "formData",
            "type": "string",
            "name": "type",
            "description": "type"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "parent_id",
            "description": "parent_id"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "name",
            "description": "name"
          },
          {
            "in": "formData",
            "type": "file",
            "name": "file",
            "description": "file"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "description",
            "description": "description"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "external_create_date",
            "description": "external_create_date"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "external_modify_date",
            "description": "external_modify_date"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "external_source",
            "description": "external_source"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "external_identity",
            "description": "external_identity"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "external_identity_type",
            "description": "external_identity_type"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "original_id",
            "description": "original_id"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "body",
            "description": "json body content"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/nodes_CreateResponse"
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>An item with the name '{name}' already exists.</li><li>Could not create a new [node type, e.g. 'Folder']</li><li>Missing required parameter '[parameter name]'</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Subtype {type} not registered</li><li>External source not found</li><li>Error getting identity type id</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes": {
      "post": {
        "operationId": "createNode2",
        "summary": "Create node | Copy a node",
        "description": "Creates a node OR Copies a node.<br><br> <b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br> The following examples will assume that there is are two categories available:<br><br> Category1 (ID 9830) <ul>\n  <li>TextField (Attribute ID 2)</li>\n  <li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li>\n</ul> Category2 (ID 6228) <ul>\n  <li>TextField (Attribute ID 2)</li>\n</ul><br> Create a Folder:<br><br> <code>{\\\"type\\\":0, \\\"parent_id\\\":2000, \\\"name\\\":\\\"New Folder\\\"}</code><br><br> Create a Folder with Category1 and Category2 and use the default attribute values for both categories:<br><br> <code>{\\\"type\\\":0, \\\"parent_id\\\":2000, \\\"name\\\":\\\"New Folder\\\", \\\"roles\\\":{\\\"categories\\\":{\\\"9830_1\\\":{}, \\\"6228_1\\\":{}}}}</code><br><br> Create a Folder with Category1 and Category2. Category1's Set Textfield on the second row has 'aaa' in the Set Textfield's third value; Category2's Textfield is 'bbb':<br><br> <code>{\\\"type\\\":0, \\\"parent_id\\\":2000, \\\"name\\\":\\\"New Folder\\\", \\\"roles\\\":{\\\"categories\\\":{\\\"9830_3_2_4\\\":[\\\"\\\",\\\"\\\",\\\"aaa\\\"], \\\"6228_2\\\":\\\"bbb\\\"}}}</code><br><br><br> Copy a node 12345 to a folder 5678 (which doesn't have any categories):<br><br> <code>{\\\"original_id\\\":12345, \\\"parent_id\\\":5678}</code><br><br> Copy a node 12345 to a folder 5678 (which doesn't have any categories) while applying Category2 with default values:<br><br> <code>{\\\"original_id\\\":12345, \\\"parent_id\\\":5678, \\\"roles\\\":{\\\"categories\\\":{\\\"6228_1\\\":{}}}}</code><br><br><br> Create a node<br> <ul>\n  <li><b>required fields</b>: type, name, parent_id</li>\n</ul> Copy a node<br> <ul>\n  <li><b>required fields</b>: original_id, parent_id</li>\n  <li>NOTE: original_id is the ID of the node to copy, parent_id is the ID of the node to copy original_id to<br></li>\n</ul> <b>The parameters for creating nodes of a specific subtype are listed below:</b><hr></hr><br> Create category<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>131</b></li>\n</ul> Create channel<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>207</b></li>\n</ul> Create document<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name, (file <i>or</i> upload_key)</li>\n  <li>defaults: type = <b>144</b></li>\n</ul> Create compound document<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>136</b></li>\n</ul> Create folder<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>0</b></li>\n</ul> Create news<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>208</b></li>\n</ul> Create project<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>202</b></li>\n</ul> Create shortcut<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>1</b></li>\n</ul> Create generation<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>2</b></li>\n</ul> Create task<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>206</b></li>\n</ul> Create task group<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>205</b></li>\n</ul> Create task list<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>204</b></li>\n</ul> Create task milestone<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>212</b></li>\n</ul> Create URL<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>140</b></li>\n</ul> Create virtual folder<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>899</b></li>\n</ul> Create search query<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>258</b></li>\n</ul>\n",
        "parameters": [
          {
            "in": "formData",
            "type": "string",
            "name": "type",
            "description": "type"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "parent_id",
            "description": "parent_id"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "name",
            "description": "name"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "description",
            "description": "description"
          },
          {
            "in": "formData",
            "type": "file",
            "name": "file",
            "description": "file Content"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "external_create_date",
            "description": "external_create_date"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "external_modify_date",
            "description": "external_modify_date"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "external_source",
            "description": "external_source"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "external_identity",
            "description": "external_identity"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "external_identity_type",
            "description": "external_identity_type"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "original_id",
            "description": "original_id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/nodes_V2ResponseElementPost"
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not create a new [node type, e.g. 'Folder']</li><li>Missing required parameter '[parameter name]'</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Subtype {type} not registered</li><li>External source not found</li><li>Error getting identity type id</li><li>Error: File could not be found within the upload directory.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>An item with the name '{name}' already exists.</li></ul>"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v1/nodes/{id}": {
      "get": {
        "operationId": "getNode",
        "summary": "Get a node",
        "description": "Gets info on the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "type": "string",
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "type": "string",
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "type": "string",
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "type": "string",
            "in": "query"
          },
          {
            "name": "perspective",
            "description": "Determines if the perspective for the node will be included in the response.",
            "type": "boolean",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/nodes_InfoResult"
            }
          },
          "400": {
            "description": "<ul><li>Could not get a node for {id}</li><li>Could not process object, invalid request</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "put": {
        "operationId": "updateNode",
        "summary": "Update a node | Move a node | Change the Versions Control setting for a Folder",
        "description": "Updates a node's info<br>Moves a node<br>Changes the Versions Control setting for a folder.<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>Update a Folder's name and description:<br><br><code>body : { \"name\":\"New Name\", \"description\":\"New Description\" }</code><br><br>Update a Folder's name and description while passing in a metadata token:<br><br><code>body : { \"name\":\"New Name\", \"description\":\"New Description\", \"metadata_token\":\"f0c0701a58c2cb03a955deb1ab2af306\" }</code><br><br>Move a node to a folder with ID 5678<br><br><code>body : { \"parent_id\":5678 }</code><br><br>Change the Versions Control setting for a folder<br><br><code>body : { \"versions_control_advanced\":true }</code><br><br>Change the Versions Control setting for a folder and apply to its Sub-Items<br><br><code>body : { \"versions_control_advanced\":true, \"apply_to\":2 }</code>",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID.",
            "type": "integer",
            "required": true,
            "in": "path"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "description": "The updated description of the node.",
                  "type": "string"
                },
                "description_multilingual": {
                  "description": "The multilingual descriptions of the node in key-value pairs (see example below). The parameter 'description' <b>must also</b> be specified in the body parameter, but the value in 'description' will be ignored and the values in 'description_multilingual' will be used.<br><br>Example to update the English (en), German (de) and French (fr) descriptions of a node where the preferred language is English (en)<br><code>body : { \"description\":\"newEnglishDescription\", \"description_multilingual\":{\"de\":\"newGermanDescription\",\"en\":\"newEnglishDescription\",\"fr\":\"newFrenchDescription\"} }</code>",
                  "type": "string"
                },
                "name": {
                  "description": "The updated name of the node.",
                  "type": "string"
                },
                "name_multilingual": {
                  "description": "The multilingual names of the node in key-value pairs (see example below). The parameter 'name' <b>must also</b> be specified in the body parameter, but the value in 'name' will be ignored and the values in 'name_multilingual' will be used.<br><br>Example to update the English (en), German (de) and French (fr) names of a node where the preferred language is English (en)<br><code>body : { \"name\":\"newEnglishName\", \"name_multilingual\":{\"de\":\"newGermanName\",\"en\":\"newEnglishName\",\"fr\":\"newFrenchName\"} }</code>",
                  "type": "string"
                },
                "versions_control_advanced": {
                  "description": "If set to TRUE then the objects added to the folder will use Advanced Versioning by default. If set to FALSE then the objects added to the folder will use Standard Versioning by default.",
                  "type": "boolean"
                },
                "apply_to": {
                  "description": "Apply version control settings to: <ol start=\"0\"><li>This Item</li><li>Sub-Items</li><li>This Item and Sub-Items</li></ol>",
                  "type": "integer",
                  "enum": [
                    0,
                    1,
                    2
                  ]
                },
                "parent_id": {
                  "description": "The updated parent ID of the node.",
                  "type": "integer"
                },
                "metadata_token": {
                  "description": "The metadata state token. It is used to resolve edit conflicts where two users are updating the node at the same time.<br><br>NOTE: If this is specified and the call is successful, the most recent metadata token will be returned in the result.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "409": {
            "description": "Could not update metadata (edit conflict)."
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "delete": {
        "operationId": "deleteNode",
        "summary": "Delete a node",
        "description": "Deletes the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "type": "string",
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "<ul><li>Could not get node for {id}</li><li>Could not process object, invalid action 'delete'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes/{id}": {
      "get": {
        "operationId": "getNode2",
        "summary": "Get a node | Get a virtual folder",
        "description": "Gets information about a node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "type": "integer",
            "required": true,
            "in": "path"
          },
          {
            "name": "actions",
            "description": "Retrieve actions for the node. This is similar to 'commands' for v1 (E.g. actions=delete&actions=open). Note: For best performance minimize the number of actions requested.<br><br>Example to get the delete and open actions<br><code>?actions=delete&actions=open</code>",
            "type": "string",
            "in": "query"
          },
          {
            "name": "perspective",
            "description": "Determines if the perspective for the node will be included in the response.",
            "type": "boolean",
            "in": "query"
          },
          {
            "name": "fields",
            "description": "The 'fields' parameter can be used to filter the results even further, if necessary.<br><br>Show the 'properties' field (which contains node information such as name, description, parent_id, etc.)<br><code>?fields=properties</code><br><br>Show the 'properties' and 'categories' fields (node and category information, respectively)<br><code>?fields=properties&fields=categories</code><br><br>Show the 'properties' and 'categories' fields (node and category information, respectively) but only the parent_id and description from 'properties'<br><code>?fields=properties{parent_id,description}&fields=categories</code><br><br>Show the 'versions' field (version information) but only the latest version<br><code>?fields=versions.element(0)</code><br><br>Show the 'permissions' field (node permissions) but only the first 5 permissions (includes Default Access and ACLs)<br><code>?fields=permissions.limit(5)</code>",
            "type": "string",
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields<br><br>Expand the id and parent_id of 'properties' (resolving the id to extra node information, and resolving the parent_id to extra node information about the parent)<br><code>?expand=properties{id,parent_id}</code>",
            "type": "string",
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data, which will be returned under results.metadata / metadata_map / metadata_order. This is an empty parameter, thus no value is required (e.g. ?metadata).<br><br>Example to get metadata<br><code>?metadata</code>",
            "type": "string",
            "in": "query"
          },
          {
            "name": "state",
            "description": "Returns the metadata state token for data (used for edit conflict resolution), which will be returned under results.state. This is an empty parameter, thus no value is required (e.g. ?state).<br><br>Example to get the metadata state token<br><code>?state</code>",
            "type": "string",
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "name": "reference_id",
            "description": "Reference node ID",
            "type": "integer",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/nodes_V2ResponseElement"
            }
          },
          "400": {
            "description": "<ul><li>Could not get a node for {id}</li><li>Could not process object, invalid request</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "put": {
        "operationId": "updateNode2",
        "summary": "Update a node | Move a node | Change the Versions Control setting for a Folder | Reserve/Unreserve a node | Collect/Uncollect a node",
        "description": "Updates a node's info<br>Moves a node<br>Changes the Versions Control setting for a folder<br>Reserves/Unreserves a node<br>Collects/Uncollects a node<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>Update a Folder's name and description:<br><br><code>body : { \"name\":\"New Name\", \"description\":\"New Description\" }</code><br><br>Update a Folder's name and description while passing in a metadata token:<br><br><code>body : { \"name\":\"New Name\", \"description\":\"New Description\", \"metadata_token\":\"f0c0701a58c2cb03a955deb1ab2af306\" }</code><br><br>Move a node to a folder with ID 5678<br><br><code>body : { \"parent_id\":5678 }</code><br><br>Change the Versions Control setting for a folder<br><br><code>body : { \"versions_control_advanced\":true }</code><br><br>Change the Versions Control setting for a folder and apply to its Sub-Items<br><br><code>body : { \"versions_control_advanced\":true, \"apply_to\":2 }</code><br><br>Reserve a document<br><br><code>body : { \"reserved_user_id\":1000 }</code><br><br>Unreserve a document<br><br><code>body : { \"reserved_user_id\":\"null\" }</code><br><br>Collect a node to a Collection with ID 5678<br><br><code>body : { \"collection_id\":5678 }</code><br><br>Uncollect a node from the Collection with ID 5678<br><br><code>body : { \"collection_id\":5678, \"operation\":\"remove\" }</code>",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID.",
            "type": "integer",
            "required": true,
            "in": "path"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "description": "The updated description of the node.",
                  "type": "string"
                },
                "description_multilingual": {
                  "description": "The multilingual descriptions of the node in key-value pairs (see example below). The parameter 'description' <b>must also</b> be specified in the body parameter, but the value in 'description' will be ignored and the values in 'description_multilingual' will be used.<br><br>Example to update the English (en), German (de) and French (fr) descriptions of a node where the preferred language is English (en)<br><code>body : { \"description\":\"newEnglishDescription\", \"description_multilingual\":{\"de\":\"newGermanDescription\",\"en\":\"newEnglishDescription\",\"fr\":\"newFrenchDescription\"} }</code>",
                  "type": "string"
                },
                "name": {
                  "description": "The updated name of the node.",
                  "type": "string"
                },
                "name_multilingual": {
                  "description": "The multilingual names of the node in key-value pairs (see example below). The parameter 'name' <b>must also</b> be specified in the body parameter, but the value in 'name' will be ignored and the values in 'name_multilingual' will be used.<br><br>Example to update the English (en), German (de) and French (fr) names of a node where the preferred language is English (en)<br><code>body : { \"name\":\"newEnglishName\", \"name_multilingual\":{\"de\":\"newGermanName\",\"en\":\"newEnglishName\",\"fr\":\"newFrenchName\"} }</code>",
                  "type": "string"
                },
                "versions_control_advanced": {
                  "description": "If set to TRUE then the objects added to the folder will use Advanced Versioning by default. If set to FALSE then the objects added to the folder will use Standard Versioning by default.",
                  "type": "boolean"
                },
                "apply_to": {
                  "description": "apply version control settings to, 0 - This Item, 1-Sub Items, 2- This Item and Sub Items",
                  "type": "integer",
                  "enum": [
                    0,
                    1,
                    2
                  ]
                },
                "reserved_user_id": {
                  "description": "The id of the user the node is being reserved to (null to unreserve)",
                  "type": "integer"
                },
                "parent_id": {
                  "description": "The updated parent ID of the node.",
                  "type": "integer"
                },
                "collection_id": {
                  "description": "ID of Collection node",
                  "type": "integer"
                },
                "operation": {
                  "description": "Keyword remove will remove item from collection",
                  "type": "string"
                },
                "metadata_token": {
                  "description": "The metadata state token (for edit conflict resolution). <br><br>NOTE: if this is specified and the call is successful, the most recent metadata token will be returned in the result.",
                  "type": "string"
                },
                "search_cache_id": {
                  "description": "Search cache ID to be used to update the Search Query item.",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/nodes_V2Empty"
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Invalid datatype specified for argument \"id\".</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "409": {
            "description": "Could not update metadata (edit conflict)."
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "delete": {
        "operationId": "deleteNode2",
        "summary": "Delete a node",
        "description": "Deletes the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "type": "string",
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/nodes_V2Empty"
            }
          },
          "400": {
            "description": "<ul><li>Could not get node for {id}</li><li>Could not process object, invalid action 'delete'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v1/nodes/{id}/actions": {
      "get": {
        "operationId": "getActions",
        "summary": "Get actions",
        "description": "Gets available actions on the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "type": "integer",
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "type": "string",
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "type": "string",
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/nodes_ActionsInfo"
            }
          },
          "400": {
            "description": "<ul><li>Could not process object, invalid request</li><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "404": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v1/nodes/{id}/nodes": {
      "get": {
        "operationId": "getSubnodes",
        "summary": "Get Subnodes",
        "description": "Browses the node, returning info on its child nodes.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "type": "integer",
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "type": "string",
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "type": "string",
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "type": "string",
            "in": "query"
          },
          {
            "type": "integer",
            "in": "query",
            "name": "where_type",
            "description": "Filter on node type. Use -1 to get all containers. Use -2 to get all searchable objects. Use -3 to get all non-containers."
          },
          {
            "type": "string",
            "in": "query",
            "name": "where_name",
            "description": "Filter on node name"
          },
          {
            "type": "string",
            "in": "query",
            "name": "where_facet",
            "description": "Filter on facet values. There will be one instance of this parameter for each facet selected. The values are combined using | character. E.g. where_facet=2095:144|0|-1 (note that -1 is a special value that denotes containers)."
          },
          {
            "type": "string",
            "in": "query",
            "name": "commands",
            "description": "Retrieve commands for nodes. There will be multiple instances of this parameter for each command requested. E.g. commands=delete&commands=default."
          },
          {
            "type": "string",
            "in": "query",
            "name": "sort",
            "description": "Order by named column. Format can be sort=name or sort=asc_name or sort=desc_name. If the prefix of asc or desc is not used then asc will be assumed."
          },
          {
            "type": "integer",
            "in": "query",
            "name": "page",
            "description": "Page Number"
          },
          {
            "type": "integer",
            "in": "query",
            "name": "limit",
            "description": "Page Size"
          },
          {
            "type": "boolean",
            "in": "query",
            "name": "show_hidden",
            "description": "Show hidden objects (default False)"
          },
          {
            "type": "boolean",
            "in": "query",
            "name": "extra",
            "description": "Return additional data for each item (default True). Disabling this will improve performance."
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/nodes_BrowseResult"
            }
          },
          "400": {
            "description": "<ul><li>Could not process object, invalid request</li><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "404": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v1/auth": {
      "get": {
        "operationId": "GetCurrentUserInfo",
        "summary": "Get Current User Info",
        "description": "Gets information on the currently authenticated user.",
        "parameters": [
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "type": "string",
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "type": "string",
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "type": "string",
            "in": "query"
          },
          {
            "name": "perspective",
            "description": "Determines if the perspective for the node will be included in the response.",
            "type": "boolean",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/auth_UserInfo"
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "auth"
        ]
      },
      "post": {
        "operationId": "authenticate",
        "summary": "Authenticate user",
        "description": "Authenticates user with the given credentials, returning an OTCS ticket if authorized.",
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "description": "Login name",
                  "type": "string"
                },
                "password": {
                  "description": "Login password",
                  "type": "string",
                  "format": "password"
                },
                "domain": {
                  "description": "Login domain",
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password"
              ]
            }
          },
          {
            "name": "timezone",
            "in": "header",
            "description": "current user's time zone",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/auth_AuthenticationInfo"
            }
          },
          "400": {
            "description": "Invalid parameter value"
          },
          "401": {
            "description": "<ul><li>Invalid username/password specified</li><li>Unable to login. Domain support is disabled</li></ul>"
          },
          "500": {
            "description": "<ul><li>Argument username is required</li><li>Argument password is required</li></ul>"
          }
        },
        "tags": [
          "auth"
        ]
      }
    }
  },
  "definitions": {
    "apiinfo": {
      "type": "object",
      "properties": {
        "DELETE": {
          "type": "string",
          "description": "If the DELETE method is available, information for this REST API call will be displayed.",
          "format": "string"
        },
        "GET": {
          "type": "string",
          "description": "If the GET method is available, information for this REST API call will be displayed.",
          "format": "string"
        },
        "POST": {
          "type": "string",
          "description": "If the POST method is available, information for this REST API call will be displayed.",
          "format": "string"
        },
        "PUT": {
          "type": "string",
          "description": "If the PUT method is available, information for this REST API call will be displayed.",
          "format": "string"
        }
      }
    },
    "validation_CheckNodesInfo": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/validation_CheckNodesItem"
          }
        }
      }
    },
    "validation_CheckNamesInfo": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/validation_CheckNamesItem"
          }
        }
      }
    },
    "validation_CheckNamesItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The id of the node which was matched on the parent by name"
        },
        "name": {
          "type": "string",
          "description": "The name of the node which was matched on the parent by name"
        }
      }
    },
    "validation_CheckNodesItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "If the node exists (ie. there was a name collision), this is the node's ID, otherwise it is null"
        },
        "name": {
          "type": "string",
          "description": "The name that was input as part of the body parameter to this call"
        },
        "type": {
          "type": "integer",
          "description": "If the node exists (ie. there was a name collision), this is the node's subtype, otherwise it is the suggested subtype for the name (based on file extension)"
        },
        "versioned": {
          "type": "boolean",
          "description": "Whether the node supports versions"
        }
      }
    },
    "nodes_bodyParam": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "description_multilingual": {
          "$ref": "#/definitions/nodes_bodyParam2"
        }
      }
    },
    "nodes_bodyParam2": {
      "type": "object",
      "properties": {
        "en": {
          "type": "string"
        },
        "de_DE": {
          "type": "string"
        }
      }
    },
    "nodes_Tag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "nodes_AddableTypesInfo": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/nodes_ActionData"
        },
        "definitions": {
          "$ref": "#/definitions/nodes_Definitions"
        },
        "definitions_map": {
          "$ref": "#/definitions/nodes_DefinitionsMap"
        },
        "definitions_order": {
          "description": "The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "nodes_AuditInfo": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/nodes_ActionData"
        },
        "definitions": {
          "$ref": "#/definitions/nodes_Definitions"
        },
        "definitions_order": {
          "description": "The order items should be displayed in",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "limit": {
          "description": "The max number of records that can be returned",
          "type": "integer"
        },
        "offset_key": {
          "$ref": "#/definitions/nodes_AuditOffsetKey"
        },
        "page": {
          "description": "Number of the current page",
          "type": "integer"
        },
        "page_total": {
          "description": "Total number of pages available",
          "type": "integer"
        },
        "total": {
          "description": "Total audit records available",
          "type": "integer"
        },
        "sort": {
          "description": "Order and column name on which the results are sorted",
          "type": "string"
        }
      }
    },
    "nodes_AuditResult2": {
      "type": "object",
      "properties": {
        "collection": {
          "description": "Collection",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2Collection"
          }
        },
        "links": {
          "description": "Links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2DataLinks"
          }
        },
        "results": {
          "description": "results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2AuditResult"
          }
        }
      }
    },
    "nodes_V2AuditResult": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2AuditData"
          }
        }
      }
    },
    "nodes_V2AuditData": {
      "type": "object",
      "properties": {
        "audit": {
          "description": "The audit data fields",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2AuditDataFields"
          }
        }
      }
    },
    "nodes_V2AuditDataFields": {
      "type": "object",
      "properties": {
        "agent_id": {
          "description": "The ID of the agent which performed the audit event on behalf of a user",
          "type": "integer"
        },
        "audit_date": {
          "description": "(Can be time-zone aware) The audit date",
          "type": "string",
          "format": "date"
        },
        "id": {
          "description": "The node ID (which these audit records belong to)",
          "type": "integer"
        },
        "user_id": {
          "description": "The user ID associated with the audit event",
          "type": "integer"
        },
        "audit_language_code": {
          "description": "The audit language code",
          "type": "string"
        },
        "audit_name": {
          "description": "The audit name",
          "type": "string"
        }
      }
    },
    "nodes_AuditOffsetKey": {
      "type": "object",
      "properties": {
        "Identity": {
          "description": "EventID of last audit record returned",
          "type": "integer"
        },
        "NoMoreData": {
          "description": "Returns a false if not all audit records were returned in data, true if all were returned",
          "type": "boolean"
        }
      }
    },
    "nodes_BrowseResult": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_NodeInfo"
          }
        },
        "definitions": {
          "$ref": "#/definitions/nodes_Definitions"
        },
        "definitions_map": {
          "$ref": "#/definitions/nodes_DefinitionsMap"
        },
        "definitions_order": {
          "description": "The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "limit": {
          "description": "Maximum number of items returned per page",
          "type": "integer"
        },
        "page": {
          "description": "Number of the current page",
          "type": "integer"
        },
        "page_total": {
          "description": "Total number of pages available",
          "type": "integer"
        },
        "range_max": {
          "description": "Number of the ending item for this page",
          "type": "integer"
        },
        "range_min": {
          "description": "Number of the starting item for this page",
          "type": "integer"
        },
        "sort": {
          "description": "Order and column name on which the results are sorted",
          "type": "string"
        },
        "total_count": {
          "description": "Total number of items available",
          "type": "integer"
        },
        "where_facet": {
          "description": "Facets on which results are filtered",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "where_name": {
          "description": "Name on which results are filtered",
          "type": "integer"
        },
        "where_type": {
          "description": "Types on which results are filtered",
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "nodes_BrowseResult2": {
      "type": "object",
      "properties": {
        "collection": {
          "description": "Collection",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2Collection"
          }
        },
        "links": {
          "description": "Links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2DataLinks"
          }
        },
        "results": {
          "description": "results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2Result"
          }
        }
      }
    },
    "nodes_ListContents": {
      "type": "object",
      "properties": {
        "links": {
          "description": "Links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2DataLinks"
          }
        },
        "results": {
          "description": "results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_ListContentsResult"
          }
        }
      }
    },
    "nodes_CellMetadata": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/nodes_CellMetadataData"
        },
        "definitions": {
          "$ref": "#/definitions/nodes_CellMetadataDefinitions"
        }
      }
    },
    "nodes_CreateResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the node which was created"
        }
      }
    },
    "nodes_CopyResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "description": "Information about the node",
          "items": {
            "$ref": "#/definitions/nodes_V1DataPost"
          }
        }
      }
    },
    "nodes_MoveResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "description": "Information about the node",
          "items": {
            "$ref": "#/definitions/nodes_V1DataPost"
          }
        }
      }
    },
    "nodes_RolesInfo": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "object"
        }
      }
    },
    "nodes_CategoriesInfo": {
      "type": "object",
      "properties": {
        "{attribute_key}": {
          "type": "string",
          "description": "Attribute key in the format {category_id}_[{set_id}_{set_row}]_{attribute_id}"
        }
      }
    },
    "nodes_FacetInfo": {
      "type": "object",
      "properties": {
        "available_values": {
          "description": "Information on the available unselected facets.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/nodes_FacetInfoProperties"
        },
        "selected_values": {
          "description": "Information on the selected facets from the query string's where_facets clause",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "nodes_FacetInfoProperties": {
      "type": "object"
    },
    "nodes_FacetsInfo": {
      "type": "object",
      "properties": {
        "facets": {
          "$ref": "#/definitions/nodes_FacetInfo"
        }
      }
    },
    "nodes_InfoResult": {
      "type": "object",
      "properties": {
        "addable_types": {
          "description": "The object types (including icon information) that can be added to this node",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_AddableTypes"
          }
        },
        "available_actions": {
          "description": "The actions that can be performed on this node",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_AvailableActions"
          }
        },
        "available_roles": {
          "description": "The available roles for this node",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_AvailableRoles"
          }
        },
        "data": {
          "$ref": "#/definitions/nodes_Data"
        },
        "definitions": {
          "$ref": "#/definitions/nodes_InfoDefinitions"
        },
        "definitions_base": {
          "description": "The definitions that are common to all nodes",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "definitions_order": {
          "description": "The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "description": "An ID representing the type of the object",
          "type": "integer"
        },
        "type_info": {
          "$ref": "#/definitions/nodes_TypeInfo"
        },
        "type_name": {
          "description": "The name of the node's object type",
          "type": "string"
        }
      }
    },
    "nodes_AddableTypes": {
      "type": "object",
      "properties": {
        "icon": {
          "type": "string",
          "description": "A relative URL to the object's icon"
        },
        "type": {
          "type": "integer",
          "description": "An ID representing the type of the object"
        },
        "type_name": {
          "type": "string",
          "description": "The name of the type of object"
        }
      }
    },
    "nodes_AvailableActions": {
      "type": "object",
      "properties": {
        "parameterless": {
          "type": "boolean",
          "description": "TRUE if this action has parameters, FALSE otherwise"
        },
        "read_only": {
          "type": "boolean",
          "description": "TRUE if this action does not modify data, FALSE otherwise"
        },
        "type": {
          "type": "string",
          "description": "The type of action"
        },
        "type_name": {
          "type": "string",
          "description": "The name of action"
        },
        "webnode_signature": {
          "type": "string",
          "description": "A unique name for this action"
        }
      }
    },
    "nodes_AvailableRoles": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of role"
        },
        "type_name": {
          "type": "string",
          "description": "The name of role"
        }
      }
    },
    "nodes_Data": {
      "type": "object",
      "properties": {
        "advanced_versioning": {
          "description": "Whether or not this item uses standard or advanced versioning",
          "type": "boolean"
        },
        "container": {
          "description": "Whether or not this item is a container",
          "type": "boolean"
        },
        "container_size": {
          "description": "The number of items in this container",
          "type": "integer"
        },
        "create_date": {
          "type": "string",
          "description": "(Can be time-zone aware) Creation date of this object"
        },
        "create_user_id": {
          "type": "integer",
          "description": "The ID of the user "
        },
        "description": {
          "type": "string",
          "description": "Description of the object"
        },
        "description_multilingual": {
          "$ref": "#/definitions/nodes_DescriptionMultilingual"
        },
        "external_create_date": {
          "type": "string",
          "format": "date",
          "description": "External create date"
        },
        "external_identity": {
          "type": "string",
          "description": "External identity"
        },
        "external_identity_type": {
          "type": "string",
          "description": "External identity type"
        },
        "external_modify_date": {
          "type": "string",
          "format": "date",
          "description": "External modify date"
        },
        "external_source": {
          "type": "string",
          "description": "External source"
        },
        "guid": {
          "type": "string",
          "description": "Global unique identifier"
        },
        "hidden": {
          "description": "Indicates if the item is hidden",
          "type": "boolean"
        },
        "icon": {
          "description": "Path to the type specific icon",
          "type": "string"
        },
        "icon_large": {
          "description": "Path to the type specific icon (larger sized)",
          "type": "string"
        },
        "id": {
          "type": "integer",
          "description": "A unique ID for this object"
        },
        "modify_date": {
          "type": "string",
          "description": "(Can be time-zone aware) Date when this object was modified"
        },
        "modify_user_id": {
          "type": "integer",
          "description": "The ID of the user who modified this object"
        },
        "name": {
          "type": "string",
          "description": "Name of the object"
        },
        "name_multilingual": {
          "$ref": "#/definitions/nodes_NameMultilingual"
        },
        "original_id": {
          "type": "integer",
          "description": "ID of original object if this object is a shortcut"
        },
        "owner_group_id": {
          "type": "integer",
          "description": "The ID of the group to which the owner of this object belongs"
        },
        "owner_user_id": {
          "type": "integer",
          "description": "The ID of the user who owns this object"
        },
        "parent_id": {
          "type": "integer",
          "description": "The ID of the parent object of which this object is a child"
        },
        "reserved": {
          "type": "boolean",
          "description": "TRUE if this object is reserved, FALSE otherwise"
        },
        "reserved_date": {
          "type": "string",
          "description": "(Can be time-zone aware) Date when this object was reserved"
        },
        "reserved_user_id": {
          "type": "integer",
          "description": "The ID of the user or group that has reserved this object"
        },
        "versionable": {
          "type": "boolean",
          "description": "TRUE if this object has versionable content, false otherwise"
        },
        "volume_id": {
          "type": "integer",
          "description": "The ID of the volume"
        }
      }
    },
    "nodes_Properties": {
      "type": "object",
      "properties": {
        "create_date": {
          "description": "Date of creation",
          "type": "string",
          "format": "date-time"
        },
        "modify_date": {
          "description": "Date of last modification",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "guid": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "parent_id": {
          "description": "Parent's ID",
          "type": "integer"
        },
        "volume_id": {
          "type": "integer"
        }
      }
    },
    "nodes_AncestorsInfo": {
      "type": "object",
      "properties": {
        "ancestors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_AncestorInfo"
          }
        }
      }
    },
    "nodes_AncestorInfo": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifer of an item, as number",
          "type": "integer"
        },
        "name": {
          "description": "Item name",
          "type": "string"
        },
        "volume_id": {
          "description": "ID of the volume under which the item is located",
          "type": "integer"
        },
        "parent_id": {
          "description": "Parent's ID",
          "type": "integer"
        },
        "type": {
          "description": "Item type",
          "type": "integer"
        },
        "type_name": {
          "description": "Item type name",
          "type": "string"
        }
      }
    },
    "nodes_ColumnsInfo": {
      "type": "object",
      "properties": {
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_ColumnInfo"
          }
        }
      }
    },
    "nodes_ColumnInfo": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifer of column, as number",
          "type": "integer"
        },
        "locked": {
          "description": "Indicates if this is a non-modifiable column",
          "type": "integer"
        },
        "alignment": {
          "description": "Horizontal alignment",
          "type": "string",
          "enum": [
            "left",
            "center",
            "right"
          ]
        },
        "column_key": {
          "description": "Unique identifier of column as string, used for e.g. sorting or getting value",
          "type": "string"
        },
        "column_display_width": {
          "description": "Width of column in letters, maximum number of letters to display",
          "type": "integer"
        },
        "column_em_width": {
          "description": "Width of column in em units",
          "type": "integer"
        },
        "data_source": {
          "description": "Name of value provider, which gives value of this column",
          "type": "string"
        },
        "data_type": {
          "type": "integer",
          "description": "Data Type (5 = Boolean,-7 = Date,13 = DatePopup,401 = DateTime,2 =integer,12 =integerPopup,-1 = String,10 = StringPopup,305 = SubType,14 = User,19 = UserPopup)",
          "enum": [
            5,
            -7,
            13,
            401,
            2,
            12,
            -1,
            10,
            305,
            14,
            19
          ]
        },
        "display_as_link": {
          "description": "Indicates display of this column as link",
          "type": "boolean"
        },
        "name": {
          "description": "Column name",
          "type": "string"
        },
        "display_value": {
          "description": "Display format string ('%value%' is to be replaced with the property value)",
          "type": "string"
        },
        "is_default": {
          "description": "Indicates if column is always displayed",
          "type": "boolean"
        },
        "is_system_column": {
          "description": "Indicates if this column is fixed system column (i.e. columns that come defined out of the box and can't be removed)",
          "type": "boolean"
        },
        "long_text": {
          "type": "integer",
          "description": "How to handle textual column values (Wrap = 0, NoWrap = 1, Truncate = 2)",
          "enum": [
            0,
            1,
            2
          ]
        },
        "name_multilingual": {
          "$ref": "#/definitions/nodes_NameMultilingual"
        },
        "new_window": {
          "description": "Indicates, in case display_as_link is true, if the link has to be opened in new window",
          "type": "boolean"
        },
        "public_access": {
          "description": "Public access permissions",
          "type": "integer"
        },
        "ready": {
          "description": "Indicates if columns is ready to be displayed.",
          "type": "boolean"
        },
        "sortable": {
          "description": "Indicates if this column is sortable.",
          "type": "boolean"
        },
        "title_text": {
          "description": "<tooltip?>",
          "type": "string"
        },
        "url": {
          "description": "Gives, in case display_as_link is true, target URL",
          "type": "string"
        }
      }
    },
    "nodes_NodeInfo": {
      "type": "object",
      "properties": {
        "volume_id": {
          "description": "ID of the volume to which this item belongs",
          "type": "integer"
        },
        "id": {
          "description": "Unique identifier of this item",
          "type": "integer"
        },
        "parent_id": {
          "description": "ID of the parent container",
          "type": "integer"
        },
        "name": {
          "description": "Item name",
          "type": "string"
        },
        "type": {
          "description": "Item type, as a number",
          "type": "integer"
        },
        "description": {
          "description": "Item description",
          "type": "string"
        },
        "create_date": {
          "description": "(Can be time-zone aware) Date of creation",
          "type": "string",
          "format": "date-time"
        },
        "modify_date": {
          "description": "(Can be time-zone aware) Date of last modification",
          "type": "string",
          "format": "date-time"
        },
        "reserved": {
          "description": "Is this item reserved",
          "type": "boolean"
        },
        "reserved_user_id": {
          "description": "ID of user that reserved this item",
          "type": "integer"
        },
        "reserved_date": {
          "description": "(Can be time-zone aware) Date this item was reserved",
          "type": "string",
          "format": "date-time"
        },
        "hidden": {
          "description": "Indicates if the item is hidden",
          "type": "boolean"
        },
        "icon": {
          "description": "Path to the icon for the type of this item",
          "type": "string"
        },
        "mime_type": {
          "description": "Mime type of the object",
          "type": "string"
        },
        "original_id": {
          "description": "ID of original item - used when this item is a shortcut",
          "type": "integer"
        },
        "type_name": {
          "description": "Item type, as a word",
          "type": "string"
        },
        "container": {
          "description": "Is this item a container",
          "type": "boolean"
        },
        "size": {
          "description": "Size of this item",
          "type": "integer"
        },
        "perm_see": {
          "type": "boolean"
        },
        "perm_see_contents": {
          "type": "boolean"
        },
        "perm_modify": {
          "type": "boolean"
        },
        "perm_modify_attributes": {
          "type": "boolean"
        },
        "perm_modify_permissions": {
          "type": "boolean"
        },
        "perm_create": {
          "type": "boolean"
        },
        "perm_delete": {
          "type": "boolean"
        },
        "perm_delete_versions": {
          "type": "boolean"
        },
        "perm_reserve": {
          "type": "boolean"
        },
        "perm_add_major_version": {
          "type": "boolean"
        },
        "cell_metadata": {
          "$ref": "#/definitions/nodes_CellMetadata"
        },
        "menu": {
          "type": "string",
          "description": ""
        },
        "favorite": {
          "description": "Whether this node has been favorited by the current user",
          "type": "boolean"
        },
        "size_formatted": {
          "description": "Size of this item with an appropriate units based on type (i.e. 11 items or 7 KB)",
          "type": "string"
        },
        "reserved_user_login": {
          "type": "string"
        },
        "action_url": {
          "description": "URL for getting available actions on this item",
          "type": "string"
        },
        "parent_id_url": {
          "description": "URL for getting metadata about this item's parent container",
          "type": "string"
        },
        "actions": {
          "type": "array",
          "description": "Actions possible on this node (only with query-parameter actions=true)",
          "items": {
            "$ref": "#/definitions/nodes_ActionInfo"
          }
        }
      }
    },
    "nodes_ActionsInfo": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "description": "Actions possible on this node. The returned actions also includes spacing (represented by dashes '-')",
          "items": {
            "$ref": "#/definitions/nodes_ActionInfo"
          }
        },
        "data": {
          "$ref": "#/definitions/nodes_ActionData"
        },
        "definitions": {
          "$ref": "#/definitions/nodes_Definitions"
        },
        "definitions_map": {
          "$ref": "#/definitions/nodes_DefinitionsMap"
        },
        "definitions_order": {
          "description": "The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "nodes_ActionInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The action's name (as shown in UI representation)"
        },
        "url": {
          "type": "string",
          "description": "The URL to be called on the action's execution"
        },
        "children": {
          "description": "List of sub-actions available. This appears when the action is a sub-menu",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_ActionInfoChild"
          }
        },
        "signature": {
          "type": "string"
        }
      }
    },
    "nodes_ActionInfoChild": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The action's name (as shown in UI representation)"
        },
        "url": {
          "type": "string",
          "description": "The URL to be called on the action's execution"
        },
        "signature": {
          "type": "string"
        }
      }
    },
    "nodes_ActionData": {
      "type": "object"
    },
    "nodes_InfoDefinitions": {
      "type": "object"
    },
    "nodes_Definitions": {
      "type": "object"
    },
    "nodes_DefinitionsBase": {
      "type": "object"
    },
    "nodes_DefinitionsMap": {
      "type": "object"
    },
    "nodes_DefinitionsOrder": {
      "type": "object"
    },
    "nodes_ThumbnailInfo": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/nodes_ThumbnailInfoData"
        },
        "definitions": {
          "$ref": "#/definitions/nodes_ThumbnailInfoDefinitions"
        },
        "definitions_map": {
          "type": "object",
          "description": "This is populated with children of item(s) in definitions_order if applicable. These items will also be in definitions and data. Always returns empty for addablenodetypes"
        },
        "definitions_order": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order"
        }
      }
    },
    "nodes_ThumbnailInfoData": {
      "type": "object",
      "properties": {
        "medium": {
          "type": "string",
          "description": "Path of the thumbnail resource ( e.g. 'api/v1/nodes/{id}/thumbnails/medium/content' )"
        }
      }
    },
    "nodes_ThumbnailInfoDefinitions": {
      "type": "object",
      "properties": {
        "medium": {
          "$ref": "#/definitions/nodes_ThumbnailInfoDefinitionsSize"
        }
      }
    },
    "nodes_ThumbnailInfoDefinitionsSize": {
      "type": "object",
      "properties": {
        "file_size": {
          "type": "integer",
          "description": "Size of the thumbnail in bytes"
        },
        "mime_type": {
          "type": "string",
          "description": "MIME type of the thumbnail"
        },
        "type": {
          "type": "string",
          "description": "The thumbnail type (currently only the medium type is supported)"
        },
        "url": {
          "type": "string",
          "description": "Path of the thumbnail resource ( e.g. 'api/v1/nodes/{id}/thumbnails/medium/content' )"
        }
      }
    },
    "nodes_TypeInfo": {
      "type": "object",
      "properties": {
        "advanced_versioning": {
          "description": "True if this document has advanced versioning, false otherwise",
          "type": "boolean"
        },
        "container": {
          "description": "True if this object is a container",
          "type": "boolean"
        }
      }
    },
    "nodes_V2Collection": {
      "type": "object",
      "properties": {
        "paging": {
          "type": "array",
          "description": "Paging Information",
          "items": {
            "$ref": "#/definitions/nodes_V2Paging"
          }
        },
        "sorting": {
          "type": "array",
          "description": "Sorting information",
          "items": {
            "$ref": "#/definitions/nodes_V2Sorting"
          }
        }
      }
    },
    "nodes_V2Columns": {
      "type": "object",
      "properties": {
        "data_type": {
          "type": "integer",
          "description": "data type"
        },
        "key": {
          "type": "string",
          "description": "key"
        },
        "name": {
          "type": "string",
          "description": "name"
        },
        "sort_key": {
          "type": "string",
          "description": "sort_key"
        }
      }
    },
    "nodes_V2Data": {
      "type": "object",
      "properties": {
        "columns": {
          "type": "array",
          "description": "columns",
          "items": {
            "$ref": "#/definitions/nodes_V2Columns"
          }
        },
        "properties": {
          "type": "array",
          "description": "Properties",
          "items": {
            "$ref": "#/definitions/nodes_V2Properties"
          }
        }
      }
    },
    "nodes_ListContentsData": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "array",
          "description": "Properties",
          "items": {
            "$ref": "#/definitions/nodes_ListContentsProperties"
          }
        }
      }
    },
    "nodes_V2DataPost": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "array",
          "description": "Properties",
          "items": {
            "$ref": "#/definitions/nodes_V2Properties"
          }
        }
      }
    },
    "nodes_V2SystemAttributesDataPost": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "array",
          "description": "Properties",
          "items": {
            "$ref": "#/definitions/nodes_V2Properties"
          }
        },
        "system_attributes": {
          "type": "array",
          "description": "System Attributes",
          "items": {
            "$ref": "#/definitions/nodes_V2SystemAttributes"
          }
        }
      }
    },
    "nodes_V2DataLinks": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "description": "",
          "items": {
            "$ref": "#/definitions/nodes_V2Links"
          }
        }
      }
    },
    "nodes_V2Empty": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "description": "results",
          "items": {
            "$ref": "#/definitions/nodes_V2EmptyResults"
          }
        },
        "links": {
          "type": "array",
          "description": "links",
          "items": {
            "$ref": "#/definitions/nodes_V2DataLinks"
          }
        }
      }
    },
    "nodes_V2EmptyResults": {
      "type": "object"
    },
    "nodes_V2Links": {
      "type": "object",
      "properties": {
        "self": {
          "type": "array",
          "description": "Self link",
          "items": {
            "$ref": "#/definitions/nodes_V2Link"
          }
        }
      }
    },
    "nodes_V2Link": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "Body"
        },
        "content_type": {
          "type": "string",
          "description": "Content Type"
        },
        "href": {
          "type": "string",
          "description": "URL"
        },
        "method": {
          "type": "string",
          "description": "HTTP Method"
        },
        "name": {
          "type": "string",
          "description": "Name"
        }
      }
    },
    "nodes_V2Paging": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "limit"
        },
        "links": {
          "type": "object",
          "description": "links"
        },
        "page": {
          "type": "integer",
          "description": "page"
        },
        "page_total": {
          "type": "integer",
          "description": "page total"
        },
        "range_max": {
          "type": "integer",
          "description": "range max"
        },
        "range_min": {
          "type": "integer",
          "description": "range min"
        },
        "total_count": {
          "type": "integer",
          "description": "total count"
        }
      }
    },
    "nodes_V2Properties": {
      "type": "object",
      "properties": {
        "advanced_versioning": {
          "description": "Whether or not this item uses standard or advanced versioning",
          "type": "boolean"
        },
        "container": {
          "description": "Whether or not this item is a container",
          "type": "boolean"
        },
        "container_size": {
          "description": "The number of items in this container",
          "type": "integer"
        },
        "create_date": {
          "description": "(Can be time-zone aware) The date that the item was created",
          "type": "string"
        },
        "create_user_id": {
          "description": "The id of the user who created the item",
          "type": "integer"
        },
        "description": {
          "description": "Description of the item",
          "type": "string"
        },
        "description_multilingual": {
          "$ref": "#/definitions/nodes_DescriptionMultilingual"
        },
        "external_create_date": {
          "description": "External create date",
          "type": "string",
          "format": "date"
        },
        "external_identity": {
          "description": "External identity",
          "type": "string"
        },
        "external_identity_type": {
          "description": "External identity type",
          "type": "string"
        },
        "external_modify_date": {
          "description": "External modify date",
          "type": "string",
          "format": "date"
        },
        "external_source": {
          "description": "External source",
          "type": "string"
        },
        "favorite": {
          "description": "Indicates if this item has been favorited by the current user",
          "type": "boolean"
        },
        "guid": {
          "description": "Globally unique id",
          "type": "string"
        },
        "hidden": {
          "description": "Indicates if the item is hidden",
          "type": "boolean"
        },
        "icon": {
          "description": "The item's icon",
          "type": "string"
        },
        "icon_large": {
          "description": "The item's icon (large)",
          "type": "string"
        },
        "id": {
          "description": "The item's unique object ID",
          "type": "integer"
        },
        "modify_date": {
          "description": "(Can be time-zone aware) The date on which the item was last modified",
          "type": "string",
          "format": "date"
        },
        "modify_user_id": {
          "description": "The id of the user who modified the item",
          "type": "integer"
        },
        "name": {
          "description": "The name of the item",
          "type": "string"
        },
        "name_multilingual": {
          "$ref": "#/definitions/nodes_NameMultilingual"
        },
        "owner": {
          "description": "The name of the owner of this item",
          "type": "string"
        },
        "owner_group_id": {
          "description": "The group id of the owner of this item",
          "type": "integer"
        },
        "owner_user_id": {
          "description": "The user id of the owner of this item",
          "type": "integer"
        },
        "parent_id": {
          "description": "The object id of the item's parent",
          "type": "integer"
        },
        "reserved": {
          "description": "Whether or not this item has been reserved",
          "type": "boolean"
        },
        "reserved_date": {
          "description": "(Can be time-zone aware) The date on which the item was reserved",
          "type": "string"
        },
        "reserved_user_id": {
          "description": "The id of the user who has this item reserved",
          "type": "integer"
        },
        "status": {
          "description": "The item's status",
          "type": "integer"
        },
        "type": {
          "description": "The item's type (unique number)",
          "type": "integer"
        },
        "type_name": {
          "description": "The item's type",
          "type": "string"
        },
        "versionable": {
          "description": "TRUE if this item has versionable content, FALSE otherwise",
          "type": "boolean"
        },
        "versions_control_advanced": {
          "description": "Whether or not newly added items to this item are added as advanced versioning (major/minor versioning)",
          "type": "boolean"
        },
        "volume_id": {
          "description": "The id of the volume to which this item belongs",
          "type": "integer"
        }
      }
    },
    "nodes_ListContentsProperties": {
      "type": "object",
      "properties": {
        "volume_id": {
          "description": "The ID of the volume to which this item belongs",
          "type": "integer"
        },
        "id": {
          "description": "The item's unique object ID",
          "type": "integer"
        },
        "parent_id": {
          "description": "The object ID of the item's parent",
          "type": "integer"
        },
        "name": {
          "description": "The name of the item",
          "type": "string"
        },
        "type": {
          "description": "The item's type (unique number)",
          "type": "integer"
        },
        "type_name": {
          "description": "The item's type",
          "type": "string"
        },
        "description": {
          "description": "Description of the item",
          "type": "string"
        },
        "create_date": {
          "description": "(Can be time-zone aware) The date that the item was created",
          "type": "string"
        },
        "create_user_id": {
          "description": "The ID of the user who created the item",
          "type": "integer"
        },
        "modify_date": {
          "description": "(Can be time-zone aware) The date on which the item was last modified",
          "type": "string",
          "format": "date"
        },
        "modify_user_id": {
          "description": "The ID of the user who modified the item",
          "type": "integer"
        },
        "reserved": {
          "description": "Whether or not this item has been reserved",
          "type": "boolean"
        },
        "reserved_user_id": {
          "description": "The ID of the user who has this item reserved",
          "type": "integer"
        },
        "reserved_date": {
          "description": "(Can be time-zone aware) The date on which the item was reserved",
          "type": "string"
        },
        "order": {
          "description": "The item's order (order 0 is Master) ",
          "type": "integer"
        },
        "icon": {
          "description": "The item's icon",
          "type": "string"
        },
        "hidden": {
          "description": "Indicates if the item is hidden",
          "type": "boolean"
        },
        "size": {
          "description": "The item's file size (in bytes)",
          "type": "integer"
        },
        "mime_type": {
          "description": "The item's MIME type",
          "type": "string"
        },
        "original_id": {
          "description": "The item's original ID",
          "type": "integer"
        }
      }
    },
    "nodes_V2SystemAttributes": {
      "type": "object",
      "properties": {
        "attribute_key": {
          "description": "A sample System Attribute",
          "type": "string"
        }
      }
    },
    "nodes_V2ResponseCollection": {
      "type": "object",
      "properties": {
        "results": {
          "description": "Results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2Result"
          }
        },
        "links": {
          "description": "Links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2Links"
          }
        }
      }
    },
    "nodes_V2ResponseElement": {
      "type": "object",
      "properties": {
        "results": {
          "description": "Results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2Result"
          }
        },
        "links": {
          "description": "Links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2DataLinks"
          }
        }
      }
    },
    "nodes_V2ResponseElementPost": {
      "type": "object",
      "properties": {
        "results": {
          "description": "Results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2ResultPost"
          }
        },
        "links": {
          "description": "Links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2DataLinks"
          }
        }
      }
    },
    "nodes_V2ResponseElementSystemAttributesPost": {
      "type": "object",
      "properties": {
        "results": {
          "description": "Results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2SystemAttributesResultPost"
          }
        },
        "links": {
          "description": "Links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2DataLinks"
          }
        }
      }
    },
    "nodes_V2Result": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "description": "Data",
          "items": {
            "$ref": "#/definitions/nodes_V2Data"
          }
        }
      }
    },
    "nodes_ListContentsResult": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "description": "Data",
          "items": {
            "$ref": "#/definitions/nodes_ListContentsData"
          }
        }
      }
    },
    "nodes_V2ResultPost": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "description": "Data",
          "items": {
            "$ref": "#/definitions/nodes_V2DataPost"
          }
        }
      }
    },
    "nodes_V2SystemAttributesResultPost": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "description": "Data",
          "items": {
            "$ref": "#/definitions/nodes_V2SystemAttributesDataPost"
          }
        }
      }
    },
    "nodes_V2Sort": {
      "type": "object"
    },
    "nodes_V2Sorting": {
      "type": "object",
      "properties": {
        "sort": {
          "type": "array",
          "description": "",
          "items": {
            "$ref": "#/definitions/nodes_V2Sort"
          }
        }
      }
    },
    "nodes_V2ResponseNodesActions": {
      "type": "object",
      "properties": {
        "results": {
          "description": "Results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2NodeActionsId"
          }
        },
        "links": {
          "description": "Links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2Links"
          }
        }
      }
    },
    "nodes_V2NodeActionsId": {
      "type": "object",
      "properties": {
        "<id>": {
          "description": "ID",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2NodeActionsData"
          }
        }
      }
    },
    "nodes_V2NodeActionsData": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2Actions"
          }
        },
        "map": {
          "description": "Map",
          "type": "object"
        },
        "order": {
          "description": "Order",
          "type": "string"
        }
      }
    },
    "nodes_V2Actions": {
      "type": "object",
      "properties": {
        "<action>": {
          "type": "array",
          "description": "Self link",
          "items": {
            "$ref": "#/definitions/nodes_V2Link"
          }
        }
      }
    },
    "nodes_v2ResponseUpdateCollection": {
      "type": "object",
      "properties": {
        "links": {
          "description": "Links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2DataLinks"
          }
        },
        "results": {
          "description": "results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_v2ResponseUpdateCollectionData"
          }
        }
      }
    },
    "nodes_v2ResponseUpdateCollectionData": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Update collection results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2UpdateCollectionStatus"
          }
        }
      }
    },
    "nodes_V2UpdateCollectionStatus": {
      "type": "object",
      "properties": {
        "status": {
          "description": "Update collection results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2UpdateCollectionStatusDetails"
          }
        }
      }
    },
    "nodes_V2UpdateCollectionStatusDetails": {
      "type": "object",
      "properties": {
        "error_count": {
          "description": "No of items failed to add or remove from collection",
          "type": "integer"
        },
        "success_count": {
          "description": "No of items successfully added or removed from collection",
          "type": "integer"
        },
        "total_count": {
          "description": "Total number of items sent as apart of the request",
          "type": "integer"
        },
        "errors": {
          "description": "No of items failed to add or remove from collection",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2UpdateCollectionErrors"
          }
        }
      }
    },
    "nodes_V2UpdateCollectionErrors": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of node to added or removed from collection",
          "type": "integer"
        },
        "name": {
          "description": "name of node to added or removed from collectionn",
          "type": "string"
        },
        "error": {
          "description": "Error occurend while adding or removing the node in collection",
          "type": "string"
        }
      }
    },
    "nodes_DoctemplatesInfo": {
      "type": "object",
      "properties": {
        "links": {
          "description": "Links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_V2DataLinks"
          }
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodes_TemplateTypeInfo"
          }
        }
      }
    },
    "nodes_TemplateTypeInfo": {
      "type": "object",
      "properties": {
        "container": {
          "type": "boolean",
          "description": "specifies whether template type is container or not"
        },
        "hasTemplates": {
          "type": "boolean",
          "description": "This parameter specifies whether templates are available or not. This parameter will be available only when group_by request parameter is available"
        },
        "name": {
          "type": "string",
          "description": "Name of the template type. For example: Document"
        },
        "recentlyUsedTemplates": {
          "type": "array",
          "description": "This response parameter specifies the list of recently used templates",
          "items": {
            "$ref": "#/definitions/nodes_TemplateInfo"
          }
        },
        "subtype": {
          "type": "integer",
          "description": "Subtype of the template type. For example: 144"
        },
        "templates": {
          "type": "array",
          "description": "This response parameter will be available only when group_by request parameter is not available",
          "items": {
            "$ref": "#/definitions/nodes_TemplateInfo"
          }
        },
        "templatesGroup": {
          "type": "array",
          "description": "This response parameter will be available only when group_by request parameter is available",
          "items": {
            "$ref": "#/definitions/nodes_TemplateTypeByClassInfo"
          }
        }
      }
    },
    "nodes_TemplateTypeByClassInfo": {
      "properties": {
        "id": {
          "type": "number",
          "description": "classification id"
        },
        "name": {
          "type": "string",
          "description": "Name of the Classification"
        },
        "templates": {
          "type": "array",
          "description": "Templates grouped by particular classification",
          "items": {
            "$ref": "#/definitions/nodes_TemplateInfo"
          }
        }
      }
    },
    "nodes_TemplateInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Data ID of the template"
        },
        "isDPWizardAvailable": {
          "type": "boolean",
          "description": "Specifies whether DPWizard module is available or not"
        },
        "mime_type": {
          "type": "string",
          "description": "mime type of the template"
        },
        "name": {
          "type": "string",
          "description": "Name of the template"
        },
        "recentlyUsedDate": {
          "type": "string",
          "format": "date",
          "description": "Recently used date ( This field will be available only for recently used templates)"
        },
        "size": {
          "type": "string",
          "description": "Exact size of the template"
        },
        "sizeformatted": {
          "type": "integer",
          "description": "Formatted size of the template"
        },
        "type": {
          "type": "integer",
          "description": "Subtype of the template. For example: 144"
        }
      }
    },
    "nodes_CellMetadataData": {
      "type": "object"
    },
    "nodes_CellMetadataDefinitions": {
      "type": "object"
    },
    "nodes_V1DataPost": {
      "type": "object",
      "properties": {
        "Properties": {
          "type": "array",
          "description": "Properties",
          "items": {
            "$ref": "#/definitions/nodes_V1Properties"
          }
        }
      }
    },
    "nodes_V1Properties": {
      "type": "object",
      "properties": {
        "container": {
          "description": "Whether or not this item is a container",
          "type": "boolean"
        },
        "container_size": {
          "description": "The number of items in this container",
          "type": "integer"
        },
        "create_date": {
          "description": "(Can be time-zone aware) The date that the item was created",
          "type": "string"
        },
        "create_user_id": {
          "description": "The id of the user who created the item",
          "type": "integer"
        },
        "description": {
          "description": "Description of the item",
          "type": "string"
        },
        "description_multilingual": {
          "$ref": "#/definitions/nodes_DescriptionMultilingual"
        },
        "external_create_date": {
          "description": "External create date",
          "type": "string",
          "format": "date"
        },
        "external_identity": {
          "description": "External identity",
          "type": "string"
        },
        "external_identity_type": {
          "description": "External identity type",
          "type": "string"
        },
        "external_modify_date": {
          "description": "External modify date",
          "type": "string",
          "format": "date"
        },
        "external_source": {
          "description": "External source",
          "type": "string"
        },
        "favorite": {
          "description": "Indicates if this item has been favorited by the current user",
          "type": "boolean"
        },
        "guid": {
          "description": "Globally unique id",
          "type": "string"
        },
        "icon": {
          "description": "The item's icon",
          "type": "string"
        },
        "icon_large": {
          "description": "The item's icon (large)",
          "type": "string"
        },
        "id": {
          "description": "The item's unique object ID",
          "type": "integer"
        },
        "modify_date": {
          "description": "(Can be time-zone aware) The date on which the item was last modified",
          "type": "string",
          "format": "date"
        },
        "modify_user_id": {
          "description": "The id of the user who modified the item",
          "type": "integer"
        },
        "name": {
          "description": "The name of the item",
          "type": "string"
        },
        "name_multilingual": {
          "$ref": "#/definitions/nodes_NameMultilingual"
        },
        "owner": {
          "description": "The name of the owner of this item",
          "type": "string"
        },
        "owner_group_id": {
          "description": "The group id of the owner of this item",
          "type": "integer"
        },
        "owner_user_id": {
          "description": "The user id of the owner of this item",
          "type": "integer"
        },
        "parent_id": {
          "description": "The object id of the item's parent",
          "type": "integer"
        },
        "reserved": {
          "description": "Whether or not this item has been reserved",
          "type": "boolean"
        },
        "reserved_date": {
          "description": "(Can be time-zone aware) The date on which the item was reserved",
          "type": "string"
        },
        "reserved_user_id": {
          "description": "The id of the user who has this item reserved",
          "type": "integer"
        },
        "type": {
          "description": "The item's type (unique number)",
          "type": "integer"
        },
        "type_name": {
          "description": "The item's type",
          "type": "string"
        },
        "versionable": {
          "description": "TRUE if this item has versionable content, FALSE otherwise",
          "type": "boolean"
        },
        "versions_control_advanced": {
          "description": "Whether or not newly added items to this item are added as advanced versioning (major/minor versioning)",
          "type": "boolean"
        },
        "volume_id": {
          "description": "The id of the volume to which this item belongs",
          "type": "integer"
        }
      }
    },
    "nodes_NameMultilingual": {
      "type": "object",
      "properties": {
        "en": {
          "type": "string",
          "description": "Name in English"
        },
        "de": {
          "type": "string",
          "description": "Name auf Deutsch"
        }
      }
    },
    "nodes_DescriptionMultilingual": {
      "type": "object",
      "properties": {
        "en": {
          "type": "string",
          "description": "Description in English"
        },
        "de": {
          "type": "string",
          "description": "Beschreibung in Deutsch"
        }
      }
    },
    "auth_UserInfo": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "description": "User Data",
          "items": {
            "$ref": "#/definitions/auth_Data"
          }
        }
      }
    },
    "auth_Data": {
      "type": "object",
      "properties": {
        "birth_date": {
          "type": "string",
          "description": "The user's birthday"
        },
        "business_email": {
          "type": "string",
          "description": "The user's business e-mail address"
        },
        "business_fax": {
          "type": "string",
          "description": "The user's business fax number"
        },
        "business_phone": {
          "type": "string",
          "description": "The user's business phone number"
        },
        "cell_phone": {
          "type": "string",
          "description": "The user's personal cellphone number"
        },
        "deleted": {
          "type": "boolean",
          "description": "TRUE if the user has been deleted, FALSE otherwise"
        },
        "display_language": {
          "type": "string",
          "description": "The user's preferred language"
        },
        "display_name": {
          "type": "string",
          "description": "The user's displayed name"
        },
        "first_name": {
          "type": "string",
          "description": "The user's first name"
        },
        "gender": {
          "type": "integer",
          "description": "The user's gender. null = <gender not set>, 0 = male, 1 = female. Anyintegers greater than 1 refer to additional custom genders, which can be configured in Content Server under 'Configure Gender Settings'."
        },
        "group_id": {
          "type": "integer",
          "description": "The ID of the user's base group"
        },
        "home_address_1": {
          "type": "string",
          "description": "The user's first home address"
        },
        "home_address_2": {
          "type": "string",
          "description": "The user's second home address"
        },
        "home_fax": {
          "type": "string",
          "description": "The user's home fax number"
        },
        "home_phone": {
          "type": "string",
          "description": "The user's home phone number"
        },
        "id": {
          "type": "integer",
          "description": "A unique identifier for the user"
        },
        "initials": {
          "type": "string",
          "description": "The user's initials"
        },
        "last_name": {
          "type": "string",
          "description": "The user's last name"
        },
        "middle_name": {
          "type": "string",
          "description": "The user's middle name"
        },
        "name": {
          "type": "string",
          "description": "The user's log-in name"
        },
        "office_location": {
          "type": "string",
          "description": "The full address of the user's office location"
        },
        "pager": {
          "type": "string",
          "description": "The user's pager number"
        },
        "personal_email": {
          "type": "string",
          "description": "The user's home email address"
        },
        "personal_interests": {
          "type": "string",
          "description": "The user's hobbies"
        },
        "personal_url_1": {
          "type": "string",
          "description": "The user's first favorite link"
        },
        "personal_url_2": {
          "type": "string",
          "description": "The user's second favorite link"
        },
        "personal_url_3": {
          "type": "string",
          "description": "The user's third favorite link"
        },
        "personal_website": {
          "type": "string",
          "description": "The user's homepage address"
        },
        "photo_id": {
          "type": "string",
          "description": "The user's photo ID"
        },
        "photo_url": {
          "type": "string",
          "description": "REST API URL to get the member's profile photo"
        },
        "privilege_grant_discovery": {
          "type": "boolean",
          "description": "TRUE if the user has eDiscovery privileges, FALSE otherwise. This information is only available to Administrators or User Administrators"
        },
        "privilege_login": {
          "type": "boolean",
          "description": "TRUE if the user log-in is enabled, FALSE otherwise. This information is only available to Administrators or User Administrators"
        },
        "privilege_modify_groups": {
          "type": "boolean",
          "description": "TRUE if the user can create groups and modify or delete the groups that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators"
        },
        "privilege_modify_users": {
          "type": "boolean",
          "description": "TRUE if the user can create users and modify or delete the users that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators"
        },
        "privilege_public_access": {
          "type": "boolean",
          "description": "TRUE means the user can access to any item in the system for which the Public Access permission is activated, FALSE otherwise. This information is only available to Administrators or User Administrators"
        },
        "privilege_system_admin_rights": {
          "type": "boolean",
          "description": "TRUE means the user has full access to Content Server's administration functionality, if the user knows the administration password. This privilege also provides access to all items in the system, without filtering for permissions. This privilege does not include the ability to administer users or groups. FALSE otherwise. This information is only available to Administrators or User Administrators"
        },
        "privilege_user_admin_rights": {
          "type": "boolean",
          "description": "TRUE if the user can create, modify, and delete any user or group, FALSE otherwise. This information is only available to Administrators or User Administrators"
        },
        "time_zone": {
          "type": "integer",
          "description": "An offset of GMT"
        },
        "title": {
          "type": "string",
          "description": "The user's title"
        },
        "type": {
          "type": "integer",
          "description": "The type of user or user-related entity"
        },
        "type_name": {
          "type": "string",
          "description": "The type name of user or user-related entity"
        }
      }
    },
    "auth_AuthenticationInfo": {
      "type": "object",
      "properties": {
        "ticket": {
          "type": "string",
          "description": "The valid authentication ticket"
        }
      }
    },
    "versions_VersionsInfo": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_VersionInfo"
          }
        },
        "definitions": {
          "$ref": "#/definitions/versions_Definitions"
        }
      }
    },
    "versions_OneVersionInfo": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_VersionInfo"
          }
        },
        "definitions": {
          "$ref": "#/definitions/versions_Definitions"
        }
      }
    },
    "versions_CategoryInfo": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Category information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_CategoryInfoData"
          }
        },
        "definitions": {
          "$ref": "#/definitions/versions_Definitions"
        },
        "definitions_order": {
          "description": "Default order of the fields defined in data",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "definitions_map": {
          "$ref": "#/definitions/versions_DefinitionsMap"
        }
      }
    },
    "versions_LatestVersionInfo": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_VersionInfo"
          }
        },
        "definitions": {
          "$ref": "#/definitions/versions_Definitions"
        }
      }
    },
    "versions_DownloadVersion": {
      "type": "object",
      "properties": {
        "data": {
          "description": "The contents of the given version of the given node",
          "type": "string"
        }
      }
    },
    "versions_DownloadNamedVersion": {
      "type": "object",
      "properties": {
        "data": {
          "description": "The contents of the given version of the given node",
          "type": "string"
        }
      }
    },
    "versions_VersionThumbnails": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "Image size information"
        },
        "definitions": {
          "$ref": "#/definitions/versions_Definitions"
        },
        "definitions_map": {
          "$ref": "#/definitions/versions_DefinitionsMap"
        },
        "definitions_order": {
          "description": "The order items should be displayed in.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "versions_DownloadVersionThumbnail": {
      "type": "object",
      "properties": {
        "data": {
          "description": "The given image of the given node version",
          "type": "string"
        }
      }
    },
    "versions_VersionInfo": {
      "type": "object",
      "properties": {
        "create_date": {
          "type": "string",
          "format": "date-time",
          "description": "(Can be time-zone aware) The version's creation date"
        },
        "description": {
          "type": "string",
          "description": "The version's description"
        },
        "external_create_date": {
          "type": "string",
          "format": "date",
          "description": "External create date. This property will not be returned if the node is a Category."
        },
        "external_identity": {
          "type": "string",
          "description": "External identity. This property will not be returned if the node is a Category."
        },
        "external_identity_type": {
          "type": "string",
          "description": "External identity type. This property will not be returned if the node is a Category."
        },
        "external_modify_date": {
          "type": "string",
          "format": "date",
          "description": "External modify date. This property will not be returned if the node is a Category."
        },
        "external_source": {
          "type": "string",
          "description": "External source. This property will not be returned if the node is a Category."
        },
        "file_create_date": {
          "type": "string",
          "format": "date-time",
          "description": "(Can be time-zone aware) The creation date of the file used for the version. This property will not be returned if the node is a Category."
        },
        "file_modify_date": {
          "type": "string",
          "format": "date-time",
          "description": "(Can be time-zone aware) The modification date of the file used for the version. This property will not be returned if the node is a Category."
        },
        "file_name": {
          "type": "string",
          "description": "The name of the file used for the version"
        },
        "file_size": {
          "type": "integer",
          "description": "The data size of the file used for the version"
        },
        "file_type": {
          "type": "string",
          "description": "The extension from the name of the file used for the version"
        },
        "id": {
          "type": "integer",
          "description": "The ID of the version"
        },
        "locked": {
          "type": "integer",
          "description": "Legacy"
        },
        "locked_date": {
          "type": "string",
          "format": "date-time",
          "description": "(Can be time-zone aware) Legacy"
        },
        "locked_user_id": {
          "type": "integer",
          "description": "Legacy"
        },
        "mime_type": {
          "type": "string",
          "description": "The MIME type for the version"
        },
        "modify_date": {
          "type": "string",
          "format": "date-time",
          "description": "(Can be time-zone aware) The modification date of the version"
        },
        "owner_id": {
          "type": "integer",
          "description": "The ID of the owner of the version"
        },
        "provider_name": {
          "type": "string",
          "description": "The name of the storage provider"
        },
        "version_id": {
          "type": "integer",
          "description": "The ID of the version"
        },
        "version_number": {
          "type": "integer",
          "description": "The version number"
        },
        "version_major_number": {
          "type": "integer",
          "description": "The major version number. This property will not be returned if the node is a Category."
        },
        "version_minor_number": {
          "type": "integer",
          "description": "The minor version number. This property will not be returned if the node is a Category."
        }
      }
    },
    "versions_VersionActionsInfo": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/versions_ActionData"
        },
        "definitions": {
          "$ref": "#/definitions/versions_Definitions"
        },
        "definitions_map": {
          "$ref": "#/definitions/versions_DefinitionsMap"
        },
        "definitions_order": {
          "description": "The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "versions_NewVersionInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the version"
        },
        "version_number": {
          "type": "integer",
          "description": "The version number"
        }
      }
    },
    "versions_ActionData": {
      "type": "object"
    },
    "versions_Definitions": {
      "type": "object"
    },
    "versions_DefinitionsMap": {
      "type": "object"
    },
    "versions_V2CategoriesResponse": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2Links"
          }
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2DataCategories"
          }
        }
      }
    },
    "versions_V2DataCategories": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2Categories"
          }
        }
      }
    },
    "versions_V2Categories": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2EmptyResults"
          }
        }
      }
    },
    "versions_V2DataVersions": {
      "type": "object",
      "properties": {
        "versions": {
          "type": "array",
          "description": "Versions",
          "items": {
            "$ref": "#/definitions/versions_VersionInfo"
          }
        }
      }
    },
    "versions_V2DataVersionsSingle": {
      "type": "object",
      "properties": {
        "versions": {
          "type": "array",
          "description": "Versions",
          "items": {
            "$ref": "#/definitions/versions_VersionInfo"
          }
        }
      }
    },
    "versions_V2DataVersionsAdd": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "array",
          "description": "Properties",
          "items": {
            "$ref": "#/definitions/versions_V2Properties"
          }
        },
        "versions": {
          "type": "array",
          "description": "Versions",
          "items": {
            "$ref": "#/definitions/versions_VersionInfo"
          }
        }
      }
    },
    "versions_V2EmptyResults": {
      "type": "object"
    },
    "versions_V2Link": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "Body"
        },
        "content_type": {
          "type": "string",
          "description": "Content Type"
        },
        "href": {
          "type": "string",
          "description": "URL"
        },
        "method": {
          "type": "string",
          "description": "HTTP Method"
        },
        "name": {
          "type": "string",
          "description": "Name"
        }
      }
    },
    "versions_V2Paging": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Limit"
        },
        "page": {
          "type": "integer",
          "description": "Page"
        },
        "page_total": {
          "type": "integer",
          "description": "Page Total"
        }
      }
    },
    "versions_V2Links": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Links data",
          "type": "object",
          "properties": {
            "self": {
              "type": "array",
              "description": "self link",
              "items": {
                "$ref": "#/definitions/versions_V2Link"
              }
            }
          }
        }
      }
    },
    "versions_V2Collection": {
      "type": "object",
      "properties": {
        "paging": {
          "description": "Collection paging",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2Paging"
          }
        }
      }
    },
    "versions_V2ResponseVersions": {
      "type": "object",
      "properties": {
        "results": {
          "description": "Results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2ResultVersions"
          }
        },
        "collection": {
          "description": "Collection",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2Collection"
          }
        },
        "links": {
          "description": "Links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2Links"
          }
        }
      }
    },
    "versions_V2ResponseVersionsSingle": {
      "type": "object",
      "properties": {
        "results": {
          "description": "Results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2ResultVersionsSingle"
          }
        },
        "links": {
          "description": "Links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2Links"
          }
        }
      }
    },
    "versions_V2ResponseVersionsAdd": {
      "type": "object",
      "properties": {
        "results": {
          "description": "Results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2ResultVersionsAdd"
          }
        },
        "links": {
          "description": "Links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2Links"
          }
        }
      }
    },
    "versions_V2ResponseVersionsDelete": {
      "type": "object",
      "properties": {
        "results": {
          "description": "Results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2EmptyResults"
          }
        },
        "links": {
          "description": "Links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2Links"
          }
        }
      }
    },
    "versions_V2ResponseVersionsPurge": {
      "type": "object",
      "properties": {
        "results": {
          "description": "Results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2EmptyResults"
          }
        },
        "links": {
          "description": "Links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2Links"
          }
        }
      }
    },
    "versions_V2ResultVersions": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "description": "Data",
          "items": {
            "$ref": "#/definitions/versions_V2DataVersions"
          }
        }
      }
    },
    "versions_V2ResultVersionsSingle": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "description": "Data",
          "items": {
            "$ref": "#/definitions/versions_V2DataVersionsSingle"
          }
        }
      }
    },
    "versions_V2ResultVersionsAdd": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "description": "Data",
          "items": {
            "$ref": "#/definitions/versions_V2DataVersionsAdd"
          }
        }
      }
    },
    "versions_V2Properties": {
      "type": "object",
      "properties": {
        "container": {
          "description": "Whether or not this item is a container",
          "type": "boolean"
        },
        "container_size": {
          "description": "The number of items in this container",
          "type": "integer"
        },
        "create_date": {
          "description": "(Can be time-zone aware) The date that the item was created",
          "type": "string"
        },
        "create_user_id": {
          "description": "The id of the user who created the item",
          "type": "integer"
        },
        "description": {
          "description": "Description of the item",
          "type": "string"
        },
        "description_multilingual": {
          "$ref": "#/definitions/versions_DescriptionMultilingual"
        },
        "external_create_date": {
          "description": "External create date",
          "type": "string",
          "format": "date"
        },
        "external_identity": {
          "description": "External identity",
          "type": "string"
        },
        "external_identity_type": {
          "description": "External identity type",
          "type": "string"
        },
        "external_modify_date": {
          "description": "External modify date",
          "type": "string",
          "format": "date"
        },
        "external_source": {
          "description": "External source",
          "type": "string"
        },
        "favorite": {
          "description": "Indicates if this item has been favorited by the current user",
          "type": "boolean"
        },
        "guid": {
          "description": "Globally unique id",
          "type": "string"
        },
        "icon": {
          "description": "The item's icon",
          "type": "string"
        },
        "icon_large": {
          "description": "The item's icon (large)",
          "type": "string"
        },
        "id": {
          "description": "The item's unique object ID",
          "type": "integer"
        },
        "modify_date": {
          "description": "(Can be time-zone aware) The date on which the item was last modified",
          "type": "string",
          "format": "date"
        },
        "modify_user_id": {
          "description": "The id of the user who modified the item",
          "type": "integer"
        },
        "name": {
          "description": "The name of the item",
          "type": "string"
        },
        "name_multilingual": {
          "$ref": "#/definitions/versions_NameMultilingual"
        },
        "owner_group_id": {
          "description": "The group id of the owner of this item",
          "type": "integer"
        },
        "owner_user_id": {
          "description": "The user id of the owner of this item",
          "type": "integer"
        },
        "parent_id": {
          "description": "The object id of the item's parent",
          "type": "integer"
        },
        "reserved": {
          "description": "Whether or not this item has been reserved",
          "type": "boolean"
        },
        "reserved_date": {
          "description": "(Can be time-zone aware) The date on which the item was reserved",
          "type": "string"
        },
        "reserved_user_id": {
          "description": "The id of the user who has this item reserved",
          "type": "integer"
        },
        "type": {
          "description": "The item's type (unique number)",
          "type": "integer"
        },
        "type_name": {
          "description": "The item's type",
          "type": "string"
        },
        "versionable": {
          "description": "TRUE if this item has versionable content, FALSE otherwise",
          "type": "boolean"
        },
        "versions_control_advanced": {
          "description": "Whether or not newly added items to this item are added as advanced versioning (major/minor versioning)",
          "type": "boolean"
        },
        "volume_id": {
          "description": "The id of the volume to which this item belongs",
          "type": "integer"
        }
      }
    },
    "versions_V2ResultRenditionsListAll": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/versions_V2ResultRenditionsByVersion"
        }
      }
    },
    "versions_V2ResultRenditionsByVersion": {
      "type": "object",
      "properties": {
        "<version_number>": {
          "type": "array",
          "description": "Renditions information for each version",
          "items": {
            "$ref": "#/definitions/versions_RenditionInfo"
          }
        }
      }
    },
    "versions_V2ResultRenditions": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "description": "Data",
          "items": {
            "$ref": "#/definitions/versions_RenditionInfo"
          }
        }
      }
    },
    "versions_V2ResponseRenditions": {
      "type": "object",
      "properties": {
        "results": {
          "description": "Results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2ResultRenditions"
          }
        },
        "links": {
          "description": "Links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2Links"
          }
        }
      }
    },
    "versions_V2ResponseRenditionsAdd": {
      "type": "object",
      "properties": {
        "results": {
          "description": "Results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2ResultRenditionsAdd"
          }
        },
        "links": {
          "description": "Links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2Links"
          }
        }
      }
    },
    "versions_V2ResultRenditionsAdd": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_RenditionInfo"
          }
        }
      }
    },
    "versions_V2ResponseRenditionsReplace": {
      "type": "object",
      "properties": {
        "results": {
          "description": "Results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2ResultRenditionsReplace"
          }
        },
        "links": {
          "description": "Links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2Links"
          }
        }
      }
    },
    "versions_V2ResultRenditionsReplace": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_RenditionInfo"
          }
        }
      }
    },
    "versions_RenditionInfo": {
      "type": "object",
      "properties": {
        "create_date": {
          "type": "string",
          "format": "date-time",
          "description": "(Can be time-zone aware) The rendition's creation date"
        },
        "external_create_date": {
          "type": "string",
          "format": "date",
          "description": "External create date. This property will not be returned if the node is a Category."
        },
        "external_identity": {
          "type": "string",
          "description": "External identity. This property will not be returned if the node is a Category."
        },
        "external_identity_type": {
          "type": "string",
          "description": "External identity type. This property will not be returned if the node is a Category."
        },
        "external_modify_date": {
          "type": "string",
          "format": "date",
          "description": "External modify date. This property will not be returned if the node is a Category."
        },
        "external_source": {
          "type": "string",
          "description": "External source. This property will not be returned if the node is a Category."
        },
        "file_create_date": {
          "type": "string",
          "format": "date-time",
          "description": "(Can be time-zone aware) The creation date of the file used for the rendition. This property will not be returned if the node is a Category."
        },
        "file_modify_date": {
          "type": "string",
          "format": "date-time",
          "description": "(Can be time-zone aware) The modification date of the file used for the rendition. This property will not be returned if the node is a Category."
        },
        "file_name": {
          "type": "string",
          "description": "The name of the file used for the rendition"
        },
        "file_size": {
          "type": "integer",
          "description": "The data size of the file used for the rendition"
        },
        "file_type": {
          "type": "string",
          "description": "The extension from the name of the file used for the rendition"
        },
        "id": {
          "type": "integer",
          "description": "The ID of the rendition"
        },
        "mime_type": {
          "type": "string",
          "description": "The MIME type for the rendition"
        },
        "modify_date": {
          "type": "string",
          "format": "date-time",
          "description": "(Can be time-zone aware) The modification date of the rendition"
        },
        "rendition_type": {
          "type": "string",
          "description": "The type of the rendition"
        },
        "owner_id": {
          "type": "integer",
          "description": "The ID of the owner of the rendition"
        },
        "version_number": {
          "type": "integer",
          "description": "The version number of the rendition"
        },
        "version_major_number": {
          "type": "integer",
          "description": "The major version number. This property will not be returned if the node is a Category."
        },
        "version_minor_number": {
          "type": "integer",
          "description": "The minor version number. This property will not be returned if the node is a Category."
        },
        "version_number_name": {
          "type": "string",
          "description": "The name of the version number. This property will not be returned if the node is a Category."
        }
      }
    },
    "versions_V2ResponseRenditionsDelete": {
      "type": "object",
      "properties": {
        "results": {
          "description": "Results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2EmptyResults"
          }
        },
        "links": {
          "description": "Links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versions_V2Links"
          }
        }
      }
    },
    "versions_CategoryInfoData": {
      "type": "object",
      "properties": {
        "{attribute_key}": {
          "description": "Attribute value",
          "type": "string"
        }
      }
    },
    "versions_DescriptionMultilingual": {
      "type": "object",
      "properties": {
        "en": {
          "type": "string",
          "description": "Description in English"
        },
        "de": {
          "type": "string",
          "description": "Beschreibung in Deutsch"
        }
      }
    },
    "versions_NameMultilingual": {
      "type": "object",
      "properties": {
        "en": {
          "type": "string",
          "description": "Name in English"
        },
        "de": {
          "type": "string",
          "description": "Name auf Deutsch"
        }
      }
    },
    "forms_CategoriesCreateFormInfo": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/forms_CategoriesData"
        },
        "options": {
          "$ref": "#/definitions/forms_CategoriesCreateOptions"
        },
        "schema": {
          "$ref": "#/definitions/forms_CategoriesCreateSchema"
        }
      }
    },
    "forms_CategoriesUpdateFormInfo": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "Category attributes and their values for the category applied to the node"
        },
        "options": {
          "$ref": "#/definitions/forms_CategoriesUpdateOptions"
        },
        "schema": {
          "$ref": "#/definitions/forms_CategoriesUpdateSchema"
        }
      }
    },
    "forms_CopyFormInfo": {
      "type": "object",
      "properties": {
        "form": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/forms_CopyInfo"
          },
          "description": "The array containing the information on the object being copied. The first element contains node data, the elements following contain optional data"
        }
      }
    },
    "forms_CreateFormInfo": {
      "type": "object",
      "properties": {
        "form": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/forms_CreateInfo"
          },
          "description": "The array containing the information on the object being created. The first element contains node data, the elements following contain optional data"
        }
      }
    },
    "forms_GetFormFileNodeInfo": {
      "type": "object",
      "properties": {
        "forms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/forms_FileNodeInfo"
          },
          "description": "The array containing the information on the object being filed. The first element contains node data, the elements following contain optional data"
        }
      }
    },
    "forms_RunPropertiesFormInfo": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/forms_RunPropertiesFormData"
        },
        "forms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/forms_RunFormInfo"
          },
          "description": "The array containing the information on WebReport parameters to be displayed. The forms are displayed when a WebReport is run."
        }
      }
    },
    "forms_RunPropertiesFormData": {
      "type": "object",
      "properties": {
        "destination_data": {
          "description": "Destination data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/forms_DestinationData"
          }
        },
        "parameters_data": {
          "description": "Parameters data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/forms_ParametersData"
          }
        }
      }
    },
    "forms_UpdateFormInfo": {
      "type": "object",
      "properties": {
        "forms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/forms_UpdateInfo"
          },
          "description": "The array containing the forms for updating the node. The first element contains node data, the elements following contain additional data"
        }
      }
    },
    "forms_DestinationData": {
      "type": "object",
      "properties": {
        "destination_specific": {
          "description": "Destination-specific data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/forms_DestinationSpecific"
          }
        },
        "export_if_no_data": {
          "description": "Whether the WebReport is set to export if there is no data",
          "type": "boolean"
        },
        "export_mime_type": {
          "description": "The MIMEType that the WebReport output is written in",
          "type": "string"
        },
        "http_method": {
          "description": "The http method that should be used to run the WebReport based on the destination type",
          "type": "string"
        },
        "output_destination": {
          "description": "The WebReport destination type",
          "type": "string"
        },
        "run_in_background": {
          "description": "Whether the WebReport is set to run in the background",
          "type": "boolean"
        },
        "schedule_data": {
          "description": "Schedule data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/forms_ScheduleData"
          }
        },
        "show_status_screen": {
          "description": "Whether the WebReport is set to display a status page after it is run",
          "type": "boolean"
        },
        "use_conversion_engine": {
          "description": "Whether the conversion engine is set to be used",
          "type": "boolean"
        },
        "xml_job_ticket_id": {
          "description": "ID of the XML job ticket",
          "type": "string"
        }
      }
    },
    "forms_DestinationSpecific": {
      "type": "object",
      "properties": {
        "category_names": {
          "description": "(Content Server Node destination only): The names of the categories that will be applied to the output node",
          "type": "string"
        },
        "create_in_id (*)": {
          "description": "(Content Server Node destination only): The node ID of the container that the WebReport output will be created in",
          "type": "string"
        },
        "duplicate_name_action": {
          "description": "(Content Server Node destination only): The action that the WebReport will take if a file of the same name as the WebReport output file is found in the destination container",
          "type": "string"
        },
        "export_type": {
          "description": "(Content Server Node destination only): Whether the WebReport is set to output to a new node or add a version to an existing node",
          "type": "string"
        },
        "node_description (*)": {
          "description": "(Content Server Node destination only): The description of the output node",
          "type": "string"
        },
        "node_name (*)": {
          "description": "(Content Server Node destination only): The name of the output node",
          "type": "string"
        },
        "node_type": {
          "description": "(Content Server Node destination only): Whether the node type of the output is set to Document or Custom View",
          "type": "string"
        },
        "add_version_to_id": {
          "description": "(Content Server Version destination only): The node to add a version to",
          "type": "string"
        },
        "append_data": {
          "description": "(Content Server Version destination only): Setting used to determine whether the WebReport output should be appended into the text of an existing document",
          "type": "string"
        },
        "end_tag": {
          "description": "(Content Server Version destination only): The end tag if the WebReport output is set to be appended into the text of an existing document between tags",
          "type": "string"
        },
        "overwrite_tags": {
          "description": "(Content Server Version destination only): Whether the output should overwrite tags in the destination text if the WebReport output is set to be appended into the text of an existing document between tags",
          "type": "string"
        },
        "start_tag": {
          "description": "(Content Server Version destination only): The start tag if the WebReport output is set to be appended into the text of an existing document between tags",
          "type": "string"
        },
        "version_description (*)": {
          "description": "(Content Server Version destination only): The description of the output version",
          "type": "string"
        },
        "version_handling": {
          "description": "(Content Server Version destination only): Whether the output should be added as a major or minor version",
          "type": "string"
        },
        "version_name (*)": {
          "description": "(Content Server Version destination only): The name of the output version",
          "type": "string"
        },
        "download_file_name (*)": {
          "description": "(Desktop destination only): The name of the file that the WebReport output is written to",
          "type": "string"
        },
        "attachment_name (*)": {
          "description": "(E-mail destination only): The name of the file attached to the e-mail",
          "type": "string"
        },
        "attach_results_to_email": {
          "description": "(E-mail destination only): Whether the WebReport output should be attached to the e-mail",
          "type": "boolean"
        },
        "email_address (*)": {
          "description": "(E-mail destination only): The e-mail address that the e-mail is being sent to",
          "type": "string"
        },
        "email_address_user_id (*)": {
          "description": "(E-mail destination only): The User ID of the Content Server user that the e-mail is being sent to",
          "type": "string"
        },
        "email_body_text (*)": {
          "description": "(E-mail destination only): The body text of the e-mail",
          "type": "string"
        },
        "email_mailing_list (*)": {
          "description": "(E-mail destination only): The node ID of the Content Server node containing the mailing list that the e-mail is being sent to",
          "type": "string"
        },
        "email_subject (*)": {
          "description": "(E-mail destination only): The Subject of the e-mail",
          "type": "string"
        },
        "append_form": {
          "description": "(Form destination only): Setting used to determine how the WebReport output affects existing form data",
          "type": "string"
        },
        "form_id (*)": {
          "description": "(Form destination only): The node ID of the Form being used as the destination of the WebReport",
          "type": "string"
        },
        "ftp_anonymous": {
          "description": "(FTP destination only): Whether the WebReport is set to login to the FTP Server anonymously",
          "type": "boolean"
        },
        "ftp_copy_options": {
          "description": "(FTP destination only): The action that the WebReport will take if a file of the same name as the WebReport output file is found on the destination FTP server",
          "type": "string"
        },
        "ftp_file_path (*)": {
          "description": "(FTP destination only): The relative path to the destination file from the FTP root folder",
          "type": "string"
        },
        "ftp_port": {
          "description": "(FTP destination only): The port on the FTP server to connect to",
          "type": "integer"
        },
        "ftp_server": {
          "description": "(FTP destination only): The IP Address or machine name of the FTP server",
          "type": "string"
        },
        "ftp_user_name": {
          "description": "(FTP destination only): The user name used for authentication on the FTP server",
          "type": "string"
        },
        "ftp_user_password": {
          "description": "(FTP destination only): The password used for authentication on the FTP server",
          "type": "string"
        },
        "server_file_path (*)": {
          "description": "(Server destination only): The file path that the output will be written to on the destination server",
          "type": "string"
        },
        "workflow_attach_output": {
          "description": "(Workflow destination only): Whether the WebReport output is attached to the initiated workflow",
          "type": "boolean"
        },
        "workflow_attachment_description (*)": {
          "description": "(Workflow destination only): The node description of the WebReport output to be attached to the initiated workflow",
          "type": "boolean"
        },
        "workflow_attachment_name (*)": {
          "description": "(Workflow destination only): The node name of the WebReport output to be attached to the initiated workflow",
          "type": "boolean"
        },
        "workflow_category_names": {
          "description": "(Workflow destination only): The names of the categories that will be applied to the output node to be attached to the initiated workflow",
          "type": "boolean"
        },
        "workflow_description (*)": {
          "description": "(Workflow destination only): The description of the initiated workflow",
          "type": "string"
        },
        "workflow_due": {
          "description": "(Workflow destination only): Setting used to determine whether the workflow will become due for completion",
          "type": "string"
        },
        "workflow_due_in": {
          "description": "(Workflow destination only): Number of days from initiation that the workflow will become due for completion",
          "type": "string"
        },
        "workflow_due_on": {
          "description": "(Workflow destination only): Date that the workflow will become due for completion",
          "type": "string"
        },
        "workflow_map_id (*)": {
          "description": "(Workflow destination only): The node ID of the Workflow map being used as the destination of the WebReport",
          "type": "string"
        },
        "workflow_title (*)": {
          "description": "(Workflow destination only): The title of the initiated workflow",
          "type": "string"
        }
      }
    },
    "forms_ScheduleData": {
      "type": "object",
      "properties": {
        "five_minute_increments": {
          "description": "Whether the '5-minute-increments' setting is set",
          "type": "boolean"
        },
        "next_run": {
          "description": "The date that the WebReport is scheduled to be next run",
          "type": "string",
          "format": "date"
        },
        "repeat_day": {
          "description": "The repeat interval number of days that the WebReport is scheduled for",
          "type": "integer"
        },
        "repeat_hour": {
          "description": "The repeat interval number of hours that the WebReport is scheduled for",
          "type": "integer"
        },
        "repeat_minute": {
          "description": "The repeat interval number of minutes that the WebReport is scheduled for",
          "type": "integer"
        },
        "repeat_week": {
          "description": "The repeat interval number of weeks that the WebReport is scheduled for",
          "type": "integer"
        },
        "run_condition": {
          "description": "'intervals' if the schedule is set to run using repeat intervals or 'specific' if the schedule is set to run on specific days of the month",
          "type": "string"
        },
        "run_on_dates": {
          "description": "List containing the dates of the month that the report is scheduled to run on",
          "type": "string"
        },
        "run_on_weeks_month": {
          "description": "List containing the weeks of the month that the report is scheduled to run on",
          "type": "string"
        },
        "run_on_days_month": {
          "description": "List containing the days of the month that the report is scheduled to run on",
          "type": "string"
        },
        "run_on_days_week": {
          "description": "List containing the days of the week that the report is scheduled to run on",
          "type": "string"
        },
        "run_times": {
          "description": "The specific number of times that the WebReport will run, or -1 for forever",
          "type": "integer"
        },
        "schedule_enabled": {
          "description": "Whether the schedule is enabled",
          "type": "boolean"
        },
        "user_id": {
          "description": "The User ID of the user that created the schedule",
          "type": "integer"
        }
      }
    },
    "forms_ParametersData": {
      "type": "object",
      "properties": {
        "prompt_file_id": {
          "description": "ID of the prompt file",
          "type": "string"
        },
        "show_descriptions": {
          "description": "Whether the parameter descriptions are set to be displayed",
          "type": "boolean"
        }
      }
    },
    "forms_RunFormInfo": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "Dynamic data for the WebReport parameters to be displayed"
        },
        "options": {
          "type": "object",
          "description": "Basic data about the alpaca form"
        },
        "schema": {
          "type": "object",
          "description": "Properties of the parameters being used for displaying WebReport parameters"
        }
      }
    },
    "forms_GeneralPropertiesFormInfo": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/forms_GeneralPropertiesInfo"
        },
        "options": {
          "$ref": "#/definitions/forms_PropertiesOptions"
        },
        "schema": {
          "$ref": "#/definitions/forms_PropertiesSchema"
        }
      }
    },
    "forms_VersionGeneralPropertiesFormInfo": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/forms_VersionGeneralPropertiesInfo"
        },
        "options": {
          "$ref": "#/definitions/forms_PropertiesOptions"
        },
        "schema": {
          "$ref": "#/definitions/forms_PropertiesSchema"
        }
      }
    },
    "forms_VersionSpecificPropertiesFormInfo": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/forms_VersionSpecificPropertiesInfo"
        },
        "options": {
          "$ref": "#/definitions/forms_PropertiesOptions"
        },
        "schema": {
          "$ref": "#/definitions/forms_PropertiesSchema"
        }
      }
    },
    "forms_SpecificPropertiesFormInfo": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "Dynamic data about the node"
        },
        "options": {
          "$ref": "#/definitions/forms_PropertiesOptions"
        },
        "schema": {
          "$ref": "#/definitions/forms_PropertiesSchema"
        }
      }
    },
    "forms_MoveFormInfo": {
      "type": "object",
      "properties": {
        "form": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/forms_MoveInfo"
          },
          "description": "The array containing the information on the object being moved. The first element contains node data, the elements following contain optional data"
        }
      }
    },
    "forms_CopyInfo": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "Dynamic data for the node being copied"
        },
        "options": {
          "type": "object",
          "description": "Basic data about the alpaca form"
        },
        "schema": {
          "type": "object",
          "description": "Properties of the parameters being used for copying the node"
        }
      }
    },
    "forms_MoveInfo": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "Dynamic data for the node being moved"
        },
        "options": {
          "type": "object",
          "description": "Basic data about the alpaca form"
        },
        "schema": {
          "type": "object",
          "description": "Properties of the parameters being used for moving the node"
        }
      }
    },
    "forms_CreateInfo": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "Dynamic data for the node being created"
        },
        "options": {
          "type": "object",
          "description": "Basic data about the alpaca form"
        },
        "schema": {
          "type": "object",
          "description": "Properties of the parameters being used for creating the node"
        }
      }
    },
    "forms_FileNodeInfo": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/forms_FileNodeInfoData"
        },
        "options": {
          "$ref": "#/definitions/forms_FileNodeInfoOptions"
        },
        "schema": {
          "$ref": "#/definitions/forms_FileNodeInfoSchema"
        }
      }
    },
    "forms_FileNodeInfoData": {
      "type": "object",
      "properties": {
        "filing_destination_id": {
          "type": "integer",
          "description": "Always contains the Filing Destination ID set to null"
        },
        "filing_classification_id": {
          "type": "integer",
          "description": "Always contains the Filing Classification ID set to null"
        }
      }
    },
    "forms_FileNodeInfoOptions": {
      "type": "object",
      "properties": {
        "fields": {
          "$ref": "#/definitions/forms_FileNodeInfoOptionsFields"
        },
        "form": {
          "$ref": "#/definitions/forms_PropertiesForm"
        }
      }
    },
    "forms_FileNodeInfoOptionsFields": {
      "type": "object",
      "properties": {
        "filing_destination_id": {
          "$ref": "#/definitions/forms_FileNodeInfoFilingDestinationIDOptionsField"
        },
        "filing_classification_id": {
          "$ref": "#/definitions/forms_FileNodeInfoFilingClassificationIDOptionsField"
        }
      }
    },
    "forms_FileNodeInfoOptionsField": {
      "type": "object",
      "properties": {
        "hidden": {
          "type": "boolean",
          "description": "True if alpaca field is hidden, false otherwise"
        },
        "hideInitValidationError": {
          "type": "boolean",
          "description": "True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise"
        },
        "label": {
          "type": "string",
          "description": "The label of the alpaca field"
        },
        "readonly": {
          "type": "boolean",
          "description": "True if the alpaca field is read only, false otherwise"
        },
        "select_types": {
          "type": "array",
          "description": "Integer values representing selectable node types ( ex.0 = Folders, 144 = Documents, 131 = Category etc. )",
          "items": {
            "type": "integer"
          }
        },
        "type": {
          "type": "string",
          "description": "The type of alpaca field ( ex. otcs_node_picker )"
        },
        "type_control": {
          "$ref": "#/definitions/forms_type_control"
        }
      }
    },
    "forms_FileNodeInfoFilingDestinationIDOptionsField": {
      "type": "object",
      "properties": {
        "hidden": {
          "type": "boolean",
          "description": "True if alpaca field is hidden, false otherwise"
        },
        "hideInitValidationError": {
          "type": "boolean",
          "description": "True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise"
        },
        "label": {
          "type": "string",
          "description": "The label of the alpaca field"
        },
        "readonly": {
          "type": "boolean",
          "description": "True if the alpaca field is read only, false otherwise"
        },
        "type": {
          "type": "string",
          "description": "The type of alpaca field ( ex. otcs_node_picker )"
        },
        "type_control": {
          "$ref": "#/definitions/file_FilingDestinationIDControl"
        }
      }
    },
    "file_FilingDestinationIDControl": {
      "type": "object",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/file_FilingDestinationIDControlParameters"
        }
      }
    },
    "file_FilingDestinationIDControlParameters": {
      "type": "object",
      "properties": {
        "search_type": {
          "type": "string",
          "description": "The search type (ex. startsWith)"
        },
        "workspace_types": {
          "type": "array",
          "description": "Integer values representing Workspace Types",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "forms_FileNodeInfoFilingClassificationIDOptionsField": {
      "type": "object",
      "properties": {
        "businessWorkspaceId": {
          "type": "integer",
          "description": "The ID of the Business Workspace Template"
        },
        "hidden": {
          "type": "boolean",
          "description": "True if alpaca field is hidden, false otherwise"
        },
        "hideInitValidationError": {
          "type": "boolean",
          "description": "True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise"
        },
        "label": {
          "type": "string",
          "description": "The label of the alpaca field"
        },
        "readonly": {
          "type": "boolean",
          "description": "True if the alpaca field is read only, false otherwise"
        },
        "type": {
          "type": "string",
          "description": "The type of alpaca field ( ex. otcs_node_picker )"
        }
      }
    },
    "forms_FileNodeInfoSchema": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/forms_FileNodeInfoSchemaProperties"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "forms_FileNodeInfoSchemaProperties": {
      "type": "object",
      "properties": {
        "filing_destination_id": {
          "$ref": "#/definitions/forms_FilingDestinationIDSchemaProperties"
        },
        "filing_classification_id": {
          "$ref": "#/definitions/forms_FilingClassificationIDSchemaProperties"
        }
      }
    },
    "forms_FilingDestinationIDSchemaProperties": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the alpaca field"
        },
        "readonly": {
          "type": "boolean",
          "description": "True if the alpaca field is read only, false otherwise"
        },
        "required": {
          "type": "boolean",
          "description": "True if the alpaca field is required, false otherwise"
        },
        "title": {
          "type": "string",
          "description": "The label of the alpaca field"
        },
        "type": {
          "type": "string",
          "description": "The type of alpaca field ( ex. otcs_node_picker )"
        }
      }
    },
    "forms_FilingClassificationIDSchemaProperties": {
      "type": "object",
      "properties": {
        "readonly": {
          "type": "boolean",
          "description": "True if the alpaca field is read only, false otherwise"
        },
        "required": {
          "type": "boolean",
          "description": "True if the alpaca field is required, false otherwise"
        },
        "title": {
          "type": "string",
          "description": "The label of the alpaca field"
        },
        "type": {
          "type": "string",
          "description": "The type of alpaca field ( ex. otcs_node_picker )"
        }
      }
    },
    "forms_GeneralPropertiesInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the node"
        },
        "description": {
          "type": "string",
          "description": "Description of the node"
        },
        "create_date": {
          "type": "string",
          "format": "date-time",
          "description": "Date of node creation"
        },
        "create_user_id": {
          "type": "integer",
          "description": "User ID of the node's creator"
        },
        "type": {
          "type": "integer",
          "description": "Node data type"
        },
        "modified_date": {
          "type": "string",
          "format": "date-time",
          "description": "Date the node was last modified"
        },
        "owner_user_id": {
          "type": "integer",
          "description": "User ID of the node's owner"
        }
      }
    },
    "forms_UpdateInfo": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "Dynamic data for the node being updated"
        },
        "options": {
          "type": "object",
          "description": "Basic data about the alpaca form"
        },
        "schema": {
          "type": "object",
          "description": "Properties of the parameters being used for updating the node"
        }
      }
    },
    "forms_VersionGeneralPropertiesInfo": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the version"
        },
        "version_number": {
          "type": "integer",
          "description": "Version number of the node"
        },
        "version_number_name": {
          "type": "string",
          "description": "Version number of the node"
        },
        "create_date": {
          "type": "string",
          "format": "date-time",
          "description": "Date the version was created"
        },
        "owner_id": {
          "type": "integer",
          "description": "User ID of the versions's owner"
        },
        "modify_date": {
          "type": "string",
          "format": "date-time",
          "description": "Date the version was last modified"
        },
        "provider_id": {
          "type": "string",
          "description": "Storage provider name"
        }
      }
    },
    "forms_VersionSpecificPropertiesInfo": {
      "type": "object",
      "properties": {
        "mime_type": {
          "type": "string",
          "description": "Mime type of the version"
        },
        "version_number": {
          "type": "integer",
          "description": "Version number of the node"
        },
        "file_name": {
          "type": "string",
          "description": "File name of the version"
        },
        "file_type": {
          "type": "string",
          "description": "File extension of the version"
        },
        "file_size_formatted": {
          "type": "string",
          "description": "Formatted file size of the versions"
        },
        "file_create_date": {
          "type": "string",
          "format": "date-time",
          "description": "Date the file was created"
        },
        "file_modify_date": {
          "type": "string",
          "format": "date-time",
          "description": "Date the file was last modified"
        }
      }
    },
    "forms_VersionsCategoriesFormInfo": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "Attributes values for the categories applied to the version"
        },
        "options": {
          "type": "object",
          "description": "Display information for the categories applied to the version"
        },
        "schema": {
          "type": "object",
          "description": "Definitions for the categories applied to the version"
        }
      }
    },
    "forms_VersionsCreateFormInfo": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/forms_VersionsCreateInfo"
        },
        "options": {
          "$ref": "#/definitions/forms_VersionsCreateOptions"
        },
        "schema": {
          "$ref": "#/definitions/forms_VersionsCreateSchema"
        }
      }
    },
    "forms_VersionsCreateInfo": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description for the new version of the node"
        },
        "file": {
          "type": "string",
          "description": "File for the new version of the node"
        }
      }
    },
    "forms_VersionsCreateOptions": {
      "type": "object",
      "properties": {
        "description": {
          "$ref": "#/definitions/forms_VersionCreateOptionsInfo"
        },
        "file": {
          "$ref": "#/definitions/forms_VersionCreateOptionsInfo"
        },
        "form": {
          "$ref": "#/definitions/forms_PropertiesForm"
        }
      }
    },
    "forms_VersionCreateOptionsInfo": {
      "type": "object",
      "properties": {
        "hidden": {
          "type": "boolean",
          "description": "True if alpaca field is hidden, false otherwise"
        },
        "hideInitValidationError": {
          "type": "boolean",
          "description": "True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise"
        },
        "label": {
          "type": "string",
          "description": "The label of the alpaca field"
        },
        "readonly": {
          "type": "boolean",
          "description": "True if the alpaca field is read only, false otherwise"
        },
        "type": {
          "type": "string",
          "description": "The type of alpaca field ( ex. otcs_node_picker )"
        }
      }
    },
    "forms_VersionsCreateSchema": {
      "type": "object",
      "properties": {
        "description": {
          "$ref": "#/definitions/forms_VersionCreateSchemaInfo"
        },
        "file": {
          "$ref": "#/definitions/forms_VersionCreateSchemaInfo"
        },
        "type": {
          "type": "string",
          "description": "Object type of the schema (always of type 'object')"
        }
      }
    },
    "forms_VersionCreateSchemaInfo": {
      "type": "object",
      "properties": {
        "readonly": {
          "type": "boolean",
          "description": "True if the alpaca field is read only, false otherwise"
        },
        "required": {
          "type": "boolean",
          "description": "True if the alpaca field is required, false otherwise"
        },
        "title": {
          "type": "string",
          "description": "The label of the alpaca field"
        },
        "type": {
          "type": "string",
          "description": "The type of alpaca field ( ex. otcs_node_picker )"
        }
      }
    },
    "forms_VersionsUpdateFormInfo": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/forms_VersionsUpdateInfo"
        },
        "options": {
          "$ref": "#/definitions/forms_VersionsUpdateOptions"
        },
        "schema": {
          "$ref": "#/definitions/forms_VersionsUpdateSchema"
        }
      }
    },
    "forms_VersionsUpdateInfo": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description for the new version of the node"
        },
        "version_number": {
          "type": "integer",
          "description": "The version number of the node to update"
        }
      }
    },
    "forms_VersionsUpdateOptions": {
      "type": "object",
      "properties": {
        "description": {
          "$ref": "#/definitions/forms_VersionUpdateOptionsInfo"
        },
        "version_number": {
          "$ref": "#/definitions/forms_VersionUpdateOptionsInfo"
        },
        "form": {
          "$ref": "#/definitions/forms_PropertiesForm"
        }
      }
    },
    "forms_VersionUpdateOptionsInfo": {
      "type": "object",
      "properties": {
        "hidden": {
          "type": "boolean",
          "description": "True if alpaca field is hidden, false otherwise"
        },
        "hideInitValidationError": {
          "type": "boolean",
          "description": "True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise"
        },
        "label": {
          "type": "string",
          "description": "The label of the alpaca field"
        },
        "readonly": {
          "type": "boolean",
          "description": "True if the alpaca field is read only, false otherwise"
        },
        "type": {
          "type": "string",
          "description": "The type of alpaca field ( ex. otcs_node_picker )"
        }
      }
    },
    "forms_VersionsUpdateSchema": {
      "type": "object",
      "properties": {
        "description": {
          "$ref": "#/definitions/forms_VersionUpdateSchemaInfo"
        },
        "version_number": {
          "$ref": "#/definitions/forms_VersionUpdateSchemaInfo2"
        },
        "type": {
          "type": "string",
          "description": "Object type of the schema (always of type 'object')"
        }
      }
    },
    "forms_VersionUpdateSchemaInfo": {
      "type": "object",
      "properties": {
        "readonly": {
          "type": "boolean",
          "description": "True if the alpaca field is read only, false otherwise"
        },
        "required": {
          "type": "boolean",
          "description": "True if the alpaca field is required, false otherwise"
        },
        "title": {
          "type": "string",
          "description": "The label of the alpaca field"
        },
        "type": {
          "type": "string",
          "description": "The type of alpaca field ( ex. otcs_node_picker )"
        }
      }
    },
    "forms_VersionUpdateSchemaInfo2": {
      "type": "object",
      "properties": {
        "pattern": {
          "type": "string",
          "description": "Regex pattern for the field"
        },
        "readonly": {
          "type": "boolean",
          "description": "True if the alpaca field is read only, false otherwise"
        },
        "required": {
          "type": "boolean",
          "description": "True if the alpaca field is required, false otherwise"
        },
        "title": {
          "type": "string",
          "description": "The label of the alpaca field"
        },
        "type": {
          "type": "string",
          "description": "The type of alpaca field ( ex. otcs_node_picker )"
        }
      }
    },
    "forms_CategoriesCreateOptions": {
      "type": "object",
      "properties": {
        "options": {
          "$ref": "#/definitions/forms_category_id"
        },
        "form": {
          "$ref": "#/definitions/forms_PropertiesForm"
        }
      }
    },
    "forms_CategoriesUpdateOptions": {
      "type": "object",
      "properties": {
        "options": {
          "type": "object",
          "description": "Properties data for the fields of the alpaca form"
        },
        "form": {
          "$ref": "#/definitions/forms_PropertiesForm"
        }
      }
    },
    "forms_CategoriesUpdateSchema": {
      "type": "object",
      "properties": {
        "schema": {
          "type": "object",
          "description": "Schema of the data that will populate the alpaca form fields"
        },
        "type": {
          "type": "string",
          "description": "Object type of the schema (always of type 'object')"
        }
      }
    },
    "forms_category_id": {
      "type": "object",
      "properties": {
        "hidden": {
          "type": "boolean",
          "description": "True if alpaca field is hidden, false otherwise"
        },
        "hideInitValidationError": {
          "type": "boolean",
          "description": "True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise"
        },
        "label": {
          "type": "string",
          "description": "The label of the alpaca field"
        },
        "readonly": {
          "type": "boolean",
          "description": "True if the alpaca field is read only, false otherwise"
        },
        "type": {
          "type": "string",
          "description": "The type of alpaca field ( ex. otcs_node_picker )"
        },
        "type_control": {
          "$ref": "#/definitions/forms_type_control"
        }
      }
    },
    "forms_type_control": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "parameters": {
          "$ref": "#/definitions/forms_parameters"
        }
      }
    },
    "forms_parameters": {
      "type": "object",
      "properties": {
        "filter_types": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Integer values representing node filter types ( ex. 0 = Folders, 144 = Documents, 131 = Category etc. )"
        },
        "select_types": {
          "type": "array",
          "description": "Integer values representing selectable node types ( ex.0 = Folders, 144 = Documents, 131 = Category etc. )",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "forms_CategoriesCreateSchema": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/forms_Schema"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "forms_CategoriesData": {
      "type": "object",
      "properties": {
        "categories_id": {
          "type": "integer",
          "description": "Always contains the categories ID set to null"
        }
      }
    },
    "forms_Options": {
      "type": "object",
      "properties": {
        "options": {
          "type": "object",
          "description": "Contains dynamic field data for the alpaca form"
        }
      }
    },
    "forms_Schema": {
      "type": "object",
      "properties": {
        "schema": {
          "type": "object",
          "description": "Contains dynamic data for populating the alpaca form fields"
        }
      }
    },
    "forms_PropertiesForm": {
      "type": "object",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/forms_PropertiesFormAttributes"
        },
        "renderForm": {
          "type": "boolean",
          "description": "True if the form will be rendered, false otherwise"
        }
      }
    },
    "forms_PropertiesFormAttributes": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "description": "Path of the action ( example: api/v1/nodes/{1} )"
        },
        "method": {
          "type": "string",
          "description": "Method of the action ( ex. GET, PUT etc. )"
        }
      }
    },
    "forms_PropertiesOptions": {
      "type": "object",
      "properties": {
        "options": {
          "$ref": "#/definitions/forms_Options"
        },
        "form": {
          "$ref": "#/definitions/forms_PropertiesForm"
        }
      }
    },
    "forms_PropertiesSchema": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/forms_Schema"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "forms_CategoryInfo": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Data about the the category"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Data about the category options"
        },
        "role_name": {
          "type": "string",
          "description": "Name of the role being used"
        },
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Schema of the category"
        }
      }
    },
    "forms_WorkflowPropertiesFormInfo": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/forms_WorkflowPropertiesInfo"
        },
        "forms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/forms_WorkflowFormInfo"
          },
          "description": "The array containing the information on workflow attributes to be displayed. The forms are displayed in the workflow dialog."
        }
      }
    },
    "forms_WorkflowPropertiesInfo": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title of the workflow"
        },
        "instructions": {
          "type": "string",
          "description": "Instructions of the workflow task"
        },
        "priority": {
          "type": "integer",
          "description": "Priority of the workflow task"
        },
        "comments_on": {
          "type": "boolean",
          "description": "Flag indicating if comments are enabled for the workflow"
        },
        "attachments_on": {
          "type": "boolean",
          "description": "Flag indicating if attachments are enabled for the workflow"
        },
        "data_packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/forms_WorkflowDataPackageInfo"
          },
          "description": "The array containing the information about the defined data packages (comments, attachments, ...)"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/forms_WorkflowActionInfo"
          },
          "description": "The array containing the information about the standard actions for the workflow task. ( example: SendOn, SendForReview, Delegate)"
        },
        "custom_actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/forms_WorkflowActionInfo"
          },
          "description": "The array containing the information about the custom actions (dispositiions) for the workflow task."
        },
        "message": {
          "$ref": "#/definitions/forms_WorkflowPropertiesMessageInfo"
        },
        "member_accept": {
          "type": "boolean",
          "description": "Indicates if the step has to be accepted before the user can work with it"
        },
        "reply_performer_id": {
          "type": "integer",
          "description": "Contains in a subwork case, if available, the performerId of the step before this step. Used for the 'Reply' action in smartUI, but can be set in other cases as well. Is not there when the performerId is not available."
        },
        "task": {
          "$ref": "#/definitions/forms_WorkflowTaskInfo"
        },
        "authentication": {
          "type": "boolean",
          "description": "Flag indicating wether the authentication is set for this task."
        }
      }
    },
    "forms_WorkflowPropertiesMessageInfo": {
      "type": "object",
      "properties": {
        "performer": {
          "type": "integer",
          "description": "Performer that is responsible for the message"
        },
        "type": {
          "type": "string",
          "description": "The type of the message. Supported types are 'delegate', 'review' and 'review_return'"
        },
        "text": {
          "type": "string",
          "description": "The message text"
        }
      }
    },
    "forms_WorkflowTaskInfo": {
      "type": "object",
      "properties": {
        "type": {
          "type": "integer",
          "description": "Task type"
        },
        "sub_type": {
          "type": "integer",
          "description": "Task sub_type"
        },
        "data": {
          "type": "object",
          "description": "Task specific data"
        }
      }
    },
    "forms_WorkflowFormInfo": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "Dynamic data for the workflow to be displayed"
        },
        "options": {
          "type": "object",
          "description": "Basic data about the alpaca form"
        },
        "schema": {
          "type": "object",
          "description": "Properties of the parameters being used for displaying workflow attributes"
        },
        "columns": {
          "type": "integer",
          "description": "Number of columns for the form, currently supported values: 1 or 2"
        }
      }
    },
    "forms_WorkflowActionInfo": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the action, has to be sent when executing the action"
        },
        "label": {
          "type": "string",
          "description": "Label of the action"
        }
      }
    },
    "forms_WorkflowDataPackageInfo": {
      "type": "object",
      "properties": {
        "type": {
          "type": "integer",
          "description": "Type of the data package, normally 1"
        },
        "sub_type": {
          "type": "integer",
          "description": "Sub type of the data package (attachments = 1, comments = 2, attributes = 3, ...)"
        },
        "data": {
          "type": "object",
          "description": "The structure of the data property depends on the data packages"
        }
      }
    },
    "forms_UserFormInfo": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/forms_UserData"
        },
        "options": {
          "$ref": "#/definitions/forms_UserViewOptions"
        },
        "schema": {
          "$ref": "#/definitions/forms_UserViewSchema"
        }
      }
    },
    "forms_UserData": {
      "type": "object",
      "properties": {
        "reportsToID": {
          "type": "string",
          "description": "The user's manager id"
        },
        "OfficeLocation": {
          "type": "string",
          "description": "The user's office location"
        },
        "MailAddress": {
          "type": "string",
          "description": "The user's office email address"
        },
        "Contact": {
          "type": "string",
          "description": "The user's office phone number"
        },
        "CellularPhone": {
          "type": "string",
          "description": "The user's personal mobile phone number"
        }
      }
    },
    "forms_UserViewOptions": {
      "type": "object",
      "properties": {
        "fields": {
          "$ref": "#/definitions/forms_UserOptionFields"
        }
      }
    },
    "forms_UserOptionFields": {
      "type": "object",
      "properties": {
        "reportsToID": {
          "$ref": "#/definitions/forms_UserOptionFieldsInfo"
        },
        "OfficeLocation": {
          "$ref": "#/definitions/forms_UserOptionFieldsInfo"
        },
        "MailAddress": {
          "$ref": "#/definitions/forms_UserOptionFieldsInfo"
        },
        "Contact": {
          "$ref": "#/definitions/forms_UserOptionFieldsInfo"
        },
        "CellularPhone": {
          "$ref": "#/definitions/forms_UserOptionFieldsInfo"
        }
      }
    },
    "forms_UserOptionFieldsInfo": {
      "type": "object",
      "properties": {
        "hidden": {
          "type": "boolean",
          "description": "True if alpaca field is hidden, false otherwise"
        },
        "hideInitValidationError": {
          "type": "boolean",
          "description": "True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise"
        },
        "label": {
          "type": "string",
          "description": "The label of the alpaca field"
        },
        "readonly": {
          "type": "boolean",
          "description": "True if the alpaca field is read only, false otherwise"
        },
        "type": {
          "type": "string",
          "description": "The type of alpaca field ( ex. otcs_user_picker )"
        }
      }
    },
    "forms_UserViewSchema": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/forms_Schema"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "forms_DoctemplatesCreateResponse": {
      "type": "object",
      "properties": {
        "forms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/forms_DoctemplatesCreateFormsInfo"
          }
        }
      }
    },
    "forms_DoctemplatesCreateFormsInfo": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "Data about the the doctemplates create form"
        },
        "options": {
          "type": "array",
          "description": "Basic data about the alpaca form",
          "items": {
            "$ref": "#/definitions/forms_DoctemplatesCreateFormsOptions"
          }
        },
        "role_name": {
          "type": "string",
          "description": "Name of the role being used"
        },
        "schema": {
          "type": "array",
          "description": "Schema of the data that will populate the alpaca form fields",
          "items": {
            "$ref": "#/definitions/forms_DoctemplatesCreateFormsSchema"
          }
        }
      }
    },
    "forms_DoctemplatesCreateFormsOptions": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "object"
        }
      }
    },
    "forms_DoctemplatesCreateFormsSchema": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "object"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "forms_RenameFormInfo": {
      "type": "object"
    }
  },
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "otdsticket": {
      "name": "API Key",
      "type": "apiKey",
      "in": "header"
    }
  },
  "security": [
    {
      "otdsticket": []
    }
  ]
}
