{
  "swagger": "2.0",
  "x-stoplight": {
    "id": "pyg1ua0h4ywat"
  },
  "info": {
    "title": "Content Server Rest API",
    "description": "OT ECM API",
    "version": "2.0.2",
    "termsOfService": "Terms & Conditions",
    "contact": {
      "name": "!DNT--Pulse_US_Scrum",
      "email": "!DNT--Pulse_US_Scrum@cbre.com",
      "url": "https://cbre.com"
    },
    "license": {
      "name": "CBRE South Asia PVT LTD",
      "url": "https://cbre.com"
    }
  },
  "host": "ecmdev.cbre.com",
  "basePath": "/otcs/cs/api/",
  "tags": [
    {
      "name": "apiinfo",
      "description": "API Information"
    },
    {
      "name": "auth",
      "description": "Authenticate user"
    },
    {
      "name": "validation",
      "description": "Validation"
    },
    {
      "name": "forms",
      "description": "Use forms"
    },
    {
      "name": "multipart",
      "description": "Manage Large File Uploads"
    },
    {
      "name": "nodes",
      "description": "Manage nodes"
    },
    {
      "name": "versions",
      "description": "Manage versions"
    }
  ],
  "consumes": [
    "multipart/form-data",
    "application/json"
  ],
  "produces": [
    "application/json",
    "multipart/form-data",
    "application/x-www-form-urlencoded"
  ],
  "paths": {
    "/v1/nodes": {
      "post": {
        "operationId": "createNode",
        "summary": "Create node | Copy a node",
        "description": "Creates a node OR Copies a node.<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>The following examples will assume that there is are two categories available:<br><br>Category1 (ID 9830)<ul><li>TextField (Attribute ID 2)</li><li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li></ul>Category2 (ID 6228)<ul><li>TextField (Attribute ID 2)</li></ul><br>Create a Folder:<br><br><code>{\"type\":0, \"parent_id\":2000, \"name\":\"New Folder\"}</code><br><br>Create a Folder with Category1 and Category2 and use the default attribute values for both categories:<br><br><code>{\"type\":0, \"parent_id\":2000, \"name\":\"New Folder\", \"roles\":{\"categories\":{\"9830\":{\"9830_1\":{}}, \"6228\":{\"6228_1\":{}}}}}</code><br><br>Create a Folder with Category1 and Category2. Category1's Set Textfield on the second row has 'aaa' in the Set Textfield's third value; Category2's Textfield is 'bbb':<br><br><code>{\"type\":0, \"parent_id\":2000, \"name\":\"New Folder\", \"roles\":{\"categories\":{\"9830\":{\"9830_3_2_4\":[\"\",\"\",\"aaa\"]}, \"6228\":{\"6228_2\":\"bbb\"}}}}</code><br><br><br>Copy a node 12345 to a folder 5678 (which doesn't have any categories):<br><br><code>{\"original_id\":12345, \"parent_id\":5678}</code><br><br>Copy a node 12345 to a folder 5678 (which doesn't have any categories) while applying Category2 with default values:<br><br><code>{\"original_id\":12345, \"parent_id\":5678, \"roles\":{\"categories\":{\"6228\":{\"6228_1\":{}}}}}</code><br><br><br>Create a node\n- <b>required fields</b>: type, name, parent_id\n\nCopy a node\n- <b>required fields</b>: original_id, parent_id\n- NOTE: original_id is the ID of the node to copy, parent_id is the ID of the node to copy original_id to\n\n<br><b>The parameters for creating nodes of a specific subtype are listed below:</b><hr></hr>\n\nCreate category\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **131**\n\nCreate channel\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **207**\n\nCreate document\n- <b>required fields</b>: type, parent_id, name, file\n- defaults: type = **144**\n\nCreate compound document\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **136**\n\nCreate folder\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **0**\n\nCreate news\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **208**\n\nCreate project\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **202**\n\nCreate shortcut\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **1**\n\nCreate generation\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **2**\n\nCreate task\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **206**\n\nCreate task group\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **205**\n\nCreate task list\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **204**\n\nCreate task milestone\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **212**\n\nCreate URL\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **140**\n\nCreate virtual folder\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **899**",
        "parameters": [
          {
            "in": "formData",
            "type": "string",
            "name": "type",
            "description": "type"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "parent_id",
            "description": "parent_id"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "name",
            "description": "name"
          },
          {
            "in": "formData",
            "type": "file",
            "name": "file",
            "description": "file"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "description",
            "description": "description"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "external_create_date",
            "description": "external_create_date"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "external_modify_date",
            "description": "external_modify_date"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "external_source",
            "description": "external_source"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "external_identity",
            "description": "external_identity"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "external_identity_type",
            "description": "external_identity_type"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "original_id",
            "description": "original_id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/nodes_CreateResponse"
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>An item with the name '{name}' already exists.</li><li>Could not create a new [node type, e.g. 'Folder']</li><li>Missing required parameter '[parameter name]'</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Subtype {type} not registered</li><li>External source not found</li><li>Error getting identity type id</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    }
  },
  "definitions": {
    "nodes_CreateResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the node which was created"
        }
      }
    }
  },
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "otdsticket": {
      "name": "API Key",
      "type": "apiKey",
      "in": "header"
    }
  },
  "security": [
    {
      "otdsticket": []
    }
  ]
}
